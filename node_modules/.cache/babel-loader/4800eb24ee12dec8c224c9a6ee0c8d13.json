{"ast":null,"code":"import _regeneratorRuntime from \"/Users/macconnolly/CS/bnbcleanings/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getAllMoviesSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getMovieDetails),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(createNewMovieSaga),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(createNewReviewSaga);\n\nimport { put, call } from 'redux-saga/effects';\nimport { push, replace } from 'connected-react-router';\nimport { getAllPropertiesService, getMovieDetailsService, createMovieService, createReviewService } from '../services/movieService';\nimport { FETCH_MOVIE_SUCCESS, FETCH_MOVIE_ERROR, UPDATE_SELECTED_MOVIE, IN_FLIGHT_START, IN_FLIGHT_STOP, CREATE_MOVIE, CREATE_MOVIE_SUCCESS, CREATE_MOVIE_ERROR } from '../actions';\nimport * as types from \"../actions\";\nexport function getAllMoviesSaga(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function getAllMoviesSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return put({\n            type: IN_FLIGHT_START\n          });\n\n        case 3:\n          _context.next = 5;\n          return call(getAllPropertiesService);\n\n        case 5:\n          response = _context.sent;\n          _context.next = 8;\n          return put({\n            type: FETCH_MOVIE_SUCCESS,\n            response: response\n          });\n\n        case 8:\n          _context.next = 10;\n          return put({\n            type: IN_FLIGHT_STOP\n          });\n\n        case 10:\n          //put(push('/movies'))\n          //put({type: IN_FLIGHT_STOP})\n          ;\n          _context.next = 17;\n          break;\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 17;\n          return put({\n            type: FETCH_MOVIE_ERROR,\n            error: _context.t0\n          });\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 13]]);\n}\nexport function getMovieDetails() {\n  var response;\n  return _regeneratorRuntime.wrap(function getMovieDetails$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          console.log('movie details saga'); //yield put({ type: IN_FLIGHT_START});\n\n          _context2.next = 4;\n          return call(getMovieDetailsService);\n\n        case 4:\n          response = _context2.sent;\n          _context2.next = 7;\n          return [put({\n            type: FETCH_MOVIE_SUCCESS,\n            response: response\n          })];\n\n        case 7:\n          _context2.next = 13;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 13;\n          return put({\n            type: FETCH_MOVIE_ERROR,\n            error: _context2.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 9]]);\n} // export function* createNewMovie(data) {\n//     try {\n//         console.log('create movie  saga');\n//         //yield put({ type: CREATE_MOVIE}, data);\n//         const response = yield call(createNewMovie(data));\n//         yield [\n//             put({ type: CREATE_MOVIE_SUCCESS, response }),\n//             console.log('created successfuklly')\n//             //put({type: IN_FLIGHT_STOP})\n//         ];\n//     } catch(error) {\n//         yield put({ type: FETCH_MOVIE_ERROR, error });\n//     }\n// }\n\nexport function createNewMovieSaga(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function createNewMovieSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          console.log('create movie saga');\n          _context3.next = 4;\n          return call(createMovieService, action);\n\n        case 4:\n          response = _context3.sent;\n          _context3.next = 7;\n          return [put({\n            type: types.CREATE_MOVIE_SUCCESS,\n            response: response\n          })];\n\n        case 7:\n          push('/movies');\n          _context3.next = 14;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 14;\n          return put({\n            type: types.CREATE_MOVIE_ERROR,\n            error: _context3.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 10]]);\n}\nexport function createNewReviewSaga(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function createNewReviewSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          console.log('create review saga');\n          _context4.next = 4;\n          return call(createReviewService, action);\n\n        case 4:\n          response = _context4.sent;\n          _context4.next = 7;\n          return [put({\n            type: types.CREATE_REVIEW_SUCCESS,\n            response: response\n          })];\n\n        case 7:\n          _context4.next = 13;\n          break;\n\n        case 9:\n          _context4.prev = 9;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 13;\n          return put({\n            type: types.CREATE_REVIEW_ERROR,\n            error: _context4.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 9]]);\n} // export function* updateSelectedMovie(movieID) {\n//     console.log('updating selected movie in saga: ');\n//     console.log(JSON.stringify(movieID.movieID));\n//     try {\n//         yield [\n//             //put({ type: UPDATE_SELECTED_MOVIE, movieID }),\n//             put(push('/movies/#/' + movieID.movieID))\n//         ];\n//     } catch(error) {\n//         yield put({ type: FETCH_MOVIE_ERROR, error });\n//     }\n// }","map":{"version":3,"sources":["/Users/macconnolly/CS/bnbcleanings/src/sagas/movieSaga.js"],"names":["getAllMoviesSaga","getMovieDetails","createNewMovieSaga","createNewReviewSaga","put","call","push","replace","getAllPropertiesService","getMovieDetailsService","createMovieService","createReviewService","FETCH_MOVIE_SUCCESS","FETCH_MOVIE_ERROR","UPDATE_SELECTED_MOVIE","IN_FLIGHT_START","IN_FLIGHT_STOP","CREATE_MOVIE","CREATE_MOVIE_SUCCESS","CREATE_MOVIE_ERROR","types","action","type","response","error","console","log","CREATE_REVIEW_SUCCESS","CREATE_REVIEW_ERROR"],"mappings":"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","sourcesContent":["import {put, call} from 'redux-saga/effects';\nimport { push, replace } from 'connected-react-router'\n\nimport { getAllPropertiesService, getMovieDetailsService, createMovieService, createReviewService } from '../services/movieService';\n\nimport {FETCH_MOVIE_SUCCESS, FETCH_MOVIE_ERROR, UPDATE_SELECTED_MOVIE, IN_FLIGHT_START, IN_FLIGHT_STOP, CREATE_MOVIE, CREATE_MOVIE_SUCCESS, CREATE_MOVIE_ERROR} from '../actions'\n\nimport * as types from \"../actions\";\n\n\nexport function* getAllMoviesSaga(action) {\n    try {\n        yield put({ type: IN_FLIGHT_START});\n        const response = yield call(getAllPropertiesService);\n        yield put({ type: FETCH_MOVIE_SUCCESS, response });\n        yield put({ type: IN_FLIGHT_STOP});\n\n            //put(push('/movies'))\n            //put({type: IN_FLIGHT_STOP})\n        ;\n    } catch(error) {\n        yield put({ type: FETCH_MOVIE_ERROR, error });\n    }\n}\n\nexport function* getMovieDetails() {\n    try {\n        console.log('movie details saga');\n        //yield put({ type: IN_FLIGHT_START});\n        const response = yield call(getMovieDetailsService);\n        yield [\n            put({ type: FETCH_MOVIE_SUCCESS, response }),\n            //put({type: IN_FLIGHT_STOP})\n        ];\n    } catch(error) {\n        yield put({ type: FETCH_MOVIE_ERROR, error });\n    }\n}\n// export function* createNewMovie(data) {\n//     try {\n//         console.log('create movie  saga');\n//         //yield put({ type: CREATE_MOVIE}, data);\n//         const response = yield call(createNewMovie(data));\n//         yield [\n//             put({ type: CREATE_MOVIE_SUCCESS, response }),\n//             console.log('created successfuklly')\n//             //put({type: IN_FLIGHT_STOP})\n//         ];\n//     } catch(error) {\n//         yield put({ type: FETCH_MOVIE_ERROR, error });\n//     }\n// }\n\n\nexport function* createNewMovieSaga(action) {\n    try {\n        console.log('create movie saga');\n        const response = yield call(createMovieService, action);\n        yield [\n            put({ type: types.CREATE_MOVIE_SUCCESS, response }),\n\n\n        ];\n        push('/movies')\n    } catch(error) {\n        yield put({ type: types.CREATE_MOVIE_ERROR, error })\n    }\n}\n\nexport function* createNewReviewSaga(action) {\n    try {\n        console.log('create review saga');\n        const response = yield call(createReviewService, action);\n        yield [\n            put({ type: types.CREATE_REVIEW_SUCCESS, response }),\n\n\n        ];\n\n    } catch(error) {\n        yield put({ type: types.CREATE_REVIEW_ERROR, error })\n    }\n}\n\n\n\n// export function* updateSelectedMovie(movieID) {\n//     console.log('updating selected movie in saga: ');\n//     console.log(JSON.stringify(movieID.movieID));\n//     try {\n//         yield [\n//             //put({ type: UPDATE_SELECTED_MOVIE, movieID }),\n//             put(push('/movies/#/' + movieID.movieID))\n//         ];\n//     } catch(error) {\n//         yield put({ type: FETCH_MOVIE_ERROR, error });\n//     }\n// }\n\n"]},"metadata":{},"sourceType":"module"}