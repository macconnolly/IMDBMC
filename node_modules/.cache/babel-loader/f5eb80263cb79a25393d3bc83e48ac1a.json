{"ast":null,"code":"import _classCallCheck from \"/Users/macconnolly/CS/bnbcleanings/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/macconnolly/CS/bnbcleanings/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/macconnolly/CS/bnbcleanings/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/macconnolly/CS/bnbcleanings/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/macconnolly/CS/bnbcleanings/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/macconnolly/CS/bnbcleanings/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/macconnolly/CS/bnbcleanings/src/components/propertyList.js\";\nimport React, { Component } from 'react';\nimport { CardColumns, Col, Image, ListGroup, Nav, Row, Tab, Modal, Button, Form, DropdownButton, Dropdown } from 'react-bootstrap';\nimport { fetchAllProperties, updateSelectedMovie, createReview } from '../actions/movieActions';\nimport { connect } from \"react-redux\";\nimport { replace, push } from 'connected-react-router';\nimport Card from \"react-bootstrap/Card\";\nimport Container from \"react-bootstrap/Container\";\nimport Cookies from 'js-cookie';\nimport '../App.css';\n\nvar PropertyList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PropertyList, _Component);\n\n  function PropertyList(props) {\n    var _this;\n\n    _classCallCheck(this, PropertyList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PropertyList).call(this, props));\n\n    _this.handleOnSelectRating = function (eventKey, event) {\n      _this.setState({\n        reviewRating: eventKey\n      });\n\n      console.log('rating: ' + _this.state.reviewRating);\n    };\n\n    _this.handleOnChangeReviewBody = function (event) {\n      _this.setState({\n        reviewBody: event.target.value\n      });\n\n      console.log('review: ' + _this.state.reviewBody);\n    };\n\n    _this.handleOnChangeSelectedOption = function (e) {\n      console.log('value of e is ' + e);\n\n      _this.props.dispatch(updateSelectedMovie(e));\n\n      _this.props.dispatch(replace('/properties/#/' + e));\n    };\n\n    _this.handleShow = _this.handleShow.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleClose = _this.handleClose.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      show: false,\n      reviewRating: 'Select rating',\n      reviewBody: ''\n    };\n    return _this;\n  } // handleSelect(key) {\n  //     console.log('selected' + key);\n  //     this.setState({ key: key });\n  // }\n\n\n  _createClass(PropertyList, [{\n    key: \"handleClose\",\n    value: function handleClose() {\n      var token = Cookies.get('token');\n      var data = {\n        reviewBody: this.state.reviewBody,\n        reviewScore: this.state.reviewRating,\n        movieID: this.props.selectedOption\n      };\n      this.props.dispatch(createReview(data, token));\n      this.setState({\n        show: false,\n        reviewRating: 'Select rating',\n        reviewBody: ''\n      });\n      this.props.dispatch(fetchAllProperties(Cookies.get('token')));\n    }\n  }, {\n    key: \"handleShow\",\n    value: function handleShow() {\n      this.setState({\n        show: true\n      });\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      // let hash = this.props.hash.substr(2);\n      // let currentMovieID = this.props.selectedOption;\n      // console.log('hash: ' + hash);\n      // console.log('selectedOption: ' + currentMovieID);\n      // if (this.props.hash !== \"\" && currentMovieID === \"\"){\n      //     this.props.dispatch(updateSelectedMovie(hash));\n      // }\n      this.props.dispatch(fetchAllProperties());\n      console.log('comp will mount');\n      console.log(this.props); //\n      // console.log('Component WILL MOUNT!');\n      // console.log('hash: ' + this.props.hash)\n      // console.log('selected option: ' + this.props.selectedOption);\n      // //this.props.dispatch(fetchAllProperties(checkCookie()));\n      // console.log('selected option: ' + this.props.selectedOption);\n      // if(this.props.selectedOption === \"\"){\n      //\n      //     this.props.dispatch(fetchAllProperties(checkCookie()));\n      //     this.props.dispatch(updateSelectedMovie(this.props.hash.substr(2)));\n      // }\n      // else {\n      //\n      //     this.props.dispatch(updateSelectedMovie(this.props.selectedOption));\n      //\n      // }\n      //updateSelectedMovie(this.props.hash.substr(2));\n      // console.log('selected option: ' + this.props.selectedOption);\n      //\n      //this.props.dispatch(fetchAllProperties(checkCookie()));\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(newProps) {//console.log('comp will receive props: ' )\n      //var newPropsObject = JSON.parse(newProps);\n      //var result = newPropsObject[0];\n      //console.log(JSON.parse(newProps))\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(newProps, newState) {// return true;\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate(nextProps, nextState) {\n      console.log('comp will update');\n      console.log(this.props); // let hash = this.props.hash.substr(2);\n      // let currentPropertyID = this.props.selectedOption;\n      // if(hash === '' && currentPropertyID == ''){\n      //     let m = nextProps.propertyList[0]._id\n      //     console.log(m)\n      //     this.handleOnChangeSelectedOption(m);\n      // }\n      //const firstMovie = JSON.parse(nextProps.propertyList[0]._id)\n      //this.handleOnChangeSelectedOption(firstMovie)\n      // console.log('comp will update')\n      // if(this.props.selectedOption === '') {\n      //     let firstMovie = nextProps.propertyList[0]._id\n      //     this.handleOnChangeSelectedOption(firstMovie);\n      // }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {//updateSelectedMovie(prevProps.hash.substr(2))\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      console.log('comp will unmount');\n    } // handleOnLoadMovies = (token) => {\n    //     this.handleOnChangeSelectedOption(this.props.selectedOption || this.props.hash.substr(2));\n    //     this.props.dispatch(fetchAllProperties(token));\n    //\n    //\n    //\n    // };\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // if(this.props.selectedOption === \"\"){\n      //     this.props.dispatch(updateSelectedMovie(this.props.propertyList[0]._id));\n      // }\n      console.log('comp did mount');\n      console.log(this.props);\n      this.props.dispatch(fetchAllProperties()); //this.handleOnChangeSelectedOption(this.props.hash.substr(2))\n      //this.props.dispatch(fetchAllProperties(checkCookie()));\n      //this.props.dispatch(updateSelectedMovie(this.props.selectedOption));\n      //this.props.dispatch(replace('/movies/#/' + this.props.selectedOption));\n      //console.log('comp did mount')\n      //this.props.dispatch(updateSelectedMovie(this.props.hash.substr(2)));\n    }\n  }, {\n    key: \"render\",\n    // handleOnLoadMovies = (token) => {\n    //     this.props.dispatch(fetchAllProperties(token)).then((response) => {\n    //         console.log('MOVIES RETURNED - UPDATE STATE' + response);\n    //         this.props.dispatch(updateSelectedMovie(this.props.hash.substr(2)))\n    //\n    //     }).catch((error) => {\n    //         console.log('ERROR')\n    //     }));\n    //\n    // };\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Container, {\n        className: \"movie-list-tabbed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, React.createElement(ListGroup, {\n        variant: \"flush\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374\n        },\n        __self: this\n      }, this.props.propertyList.map(function (property, index) {\n        return React.createElement(ListGroup.Item, {\n          action: true,\n          key: property._id,\n          value: property._id // active={this.props.selectedOption === movie._id}\n          ,\n          onClick: function onClick(e) {\n            return _this2.handleOnChangeSelectedOption(e);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 376\n          },\n          __self: this\n        }, property.name);\n      })));\n    }\n  }]);\n\n  return PropertyList;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    pathname: state.router.location.pathname,\n    search: state.router.location.search,\n    hash: state.router.location.hash,\n    propertyList: state.property.titles,\n    selectedOption: state.property.selectedOption,\n    inFlight: state.property.inFlight\n  };\n};\n\nexport default connect(mapStateToProps)(PropertyList);","map":{"version":3,"sources":["/Users/macconnolly/CS/bnbcleanings/src/components/propertyList.js"],"names":["React","Component","CardColumns","Col","Image","ListGroup","Nav","Row","Tab","Modal","Button","Form","DropdownButton","Dropdown","fetchAllProperties","updateSelectedMovie","createReview","connect","replace","push","Card","Container","Cookies","PropertyList","props","handleOnSelectRating","eventKey","event","setState","reviewRating","console","log","state","handleOnChangeReviewBody","reviewBody","target","value","handleOnChangeSelectedOption","e","dispatch","handleShow","bind","handleClose","show","token","get","data","reviewScore","movieID","selectedOption","newProps","newState","nextProps","nextState","prevProps","prevState","propertyList","map","property","index","_id","name","mapStateToProps","pathname","router","location","search","hash","titles","inFlight"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {\n    CardColumns,\n    Col,\n    Image,\n    ListGroup,\n    Nav,\n    Row,\n    Tab,\n    Modal,\n    Button,\n    Form,\n    DropdownButton,\n    Dropdown\n} from 'react-bootstrap';\nimport {fetchAllProperties, updateSelectedMovie, createReview} from '../actions/movieActions';\nimport {connect} from \"react-redux\";\nimport { replace, push } from 'connected-react-router'\nimport Card from \"react-bootstrap/Card\";\nimport Container from \"react-bootstrap/Container\";\nimport Cookies from 'js-cookie';\nimport '../App.css'\n\n\n\nclass PropertyList extends Component {\n    constructor(props) {\n\n        super(props);\n\n        this.handleShow = this.handleShow.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n\n        this.state = {\n            show: false,\n            reviewRating: 'Select rating',\n            reviewBody: ''\n        };\n    }\n\n    // handleSelect(key) {\n    //     console.log('selected' + key);\n    //     this.setState({ key: key });\n    // }\n\n    handleOnSelectRating = (eventKey, event) => {\n        this.setState({\n            reviewRating: eventKey\n        });\n        console.log('rating: ' + this.state.reviewRating);\n    };\n\n    handleOnChangeReviewBody=(event)=>\n    {\n        this.setState({reviewBody: event.target.value});\n        console.log('review: ' + this.state.reviewBody);\n    };\n\n    handleClose() {\n\n        let token = Cookies.get('token');\n        var data = {\n            reviewBody: this.state.reviewBody,\n            reviewScore: this.state.reviewRating,\n            movieID: this.props.selectedOption\n        };\n        this.props.dispatch(createReview(data, token));\n        this.setState({\n            show: false,\n            reviewRating: 'Select rating',\n            reviewBody: ''});\n\n        this.props.dispatch(fetchAllProperties(Cookies.get('token')));\n\n    }\n\n    handleShow() {\n        this.setState({ show: true });\n    }\n\n    componentWillMount() {\n\n        // let hash = this.props.hash.substr(2);\n        // let currentMovieID = this.props.selectedOption;\n        // console.log('hash: ' + hash);\n        // console.log('selectedOption: ' + currentMovieID);\n        // if (this.props.hash !== \"\" && currentMovieID === \"\"){\n        //     this.props.dispatch(updateSelectedMovie(hash));\n        // }\n        this.props.dispatch(fetchAllProperties());\n\n\n\n        console.log('comp will mount')\n        console.log(this.props);\n\n        //\n        // console.log('Component WILL MOUNT!');\n        // console.log('hash: ' + this.props.hash)\n        // console.log('selected option: ' + this.props.selectedOption);\n        // //this.props.dispatch(fetchAllProperties(checkCookie()));\n        // console.log('selected option: ' + this.props.selectedOption);\n\n\n        // if(this.props.selectedOption === \"\"){\n        //\n        //     this.props.dispatch(fetchAllProperties(checkCookie()));\n        //     this.props.dispatch(updateSelectedMovie(this.props.hash.substr(2)));\n        // }\n        // else {\n        //\n        //     this.props.dispatch(updateSelectedMovie(this.props.selectedOption));\n        //\n        // }\n        //updateSelectedMovie(this.props.hash.substr(2));\n        // console.log('selected option: ' + this.props.selectedOption);\n        //\n\n        //this.props.dispatch(fetchAllProperties(checkCookie()));\n\n\n\n\n\n\n    }\n    componentWillReceiveProps(newProps) {\n        //console.log('comp will receive props: ' )\n\n\n\n        //var newPropsObject = JSON.parse(newProps);\n        //var result = newPropsObject[0];\n        //console.log(JSON.parse(newProps))\n\n    }\n    shouldComponentUpdate(newProps, newState) {\n\n        // return true;\n    }\n    componentWillUpdate(nextProps, nextState) {\n        console.log('comp will update')\n        console.log(this.props);\n\n        // let hash = this.props.hash.substr(2);\n        // let currentPropertyID = this.props.selectedOption;\n\n        // if(hash === '' && currentPropertyID == ''){\n        //     let m = nextProps.propertyList[0]._id\n        //     console.log(m)\n        //     this.handleOnChangeSelectedOption(m);\n        // }\n\n\n        //const firstMovie = JSON.parse(nextProps.propertyList[0]._id)\n        //this.handleOnChangeSelectedOption(firstMovie)\n        // console.log('comp will update')\n        // if(this.props.selectedOption === '') {\n        //     let firstMovie = nextProps.propertyList[0]._id\n        //     this.handleOnChangeSelectedOption(firstMovie);\n        // }\n\n    }\n    componentDidUpdate(prevProps, prevState) {\n        //updateSelectedMovie(prevProps.hash.substr(2))\n\n\n\n    }\n    componentWillUnmount() {\n        console.log('comp will unmount')\n\n    }\n\n    // handleOnLoadMovies = (token) => {\n    //     this.handleOnChangeSelectedOption(this.props.selectedOption || this.props.hash.substr(2));\n    //     this.props.dispatch(fetchAllProperties(token));\n    //\n    //\n    //\n    // };\n\n    componentDidMount() {\n\n\n        // if(this.props.selectedOption === \"\"){\n        //     this.props.dispatch(updateSelectedMovie(this.props.propertyList[0]._id));\n        // }\n        console.log('comp did mount')\n        console.log(this.props);\n        this.props.dispatch(fetchAllProperties());\n\n        //this.handleOnChangeSelectedOption(this.props.hash.substr(2))\n\n\n\n\n        //this.props.dispatch(fetchAllProperties(checkCookie()));\n        //this.props.dispatch(updateSelectedMovie(this.props.selectedOption));\n\n\n        //this.props.dispatch(replace('/movies/#/' + this.props.selectedOption));\n\n        //console.log('comp did mount')\n\n        //this.props.dispatch(updateSelectedMovie(this.props.hash.substr(2)));\n\n    }\n    handleOnChangeSelectedOption = (e) => {\n        console.log('value of e is ' + e);\n        this.props.dispatch(updateSelectedMovie(e));\n        this.props.dispatch(replace('/properties/#/' + e));\n\n    };\n    // handleOnLoadMovies = (token) => {\n    //     this.props.dispatch(fetchAllProperties(token)).then((response) => {\n    //         console.log('MOVIES RETURNED - UPDATE STATE' + response);\n    //         this.props.dispatch(updateSelectedMovie(this.props.hash.substr(2)))\n    //\n    //     }).catch((error) => {\n    //         console.log('ERROR')\n    //     }));\n    //\n    // };\n\n\n\n\n\n\n\n\n    render() {\n\n        return (\n            <Container className='movie-list-tabbed'>\n                {/*{*/}\n                    {/*(this.props.inFlight ? 'loading' : '')*/}\n                {/*}*/}\n                {/*<Tab.Container id=\"moviestabs\" defaultActiveKey='a' activeKey={this.props.selectedOption} mountOnEnter={false}  onSelect={(e) => this.handleOnChangeSelectedOption(e) } >*/}\n                    {/*<Row>*/}\n                        {/*<Col md={3}>*/}\n                            {/*<Card>*/}\n                                {/*<Card.Header>Top Rated Movies</Card.Header>*/}\n                                {/*<Card.Body>*/}\n                            {/*<Nav variant=\"pills\" className=\"flex-column\" activeKey={this.props.selectedOption}  >*/}\n                                    {/*{*/}\n                                        {/*this.props.propertyList.map((movie, index) => (*/}\n                                        {/*<Nav.Item key={movie._id} >*/}\n                                            {/*<Nav.Link eventKey={movie._id}>*/}\n                                                {/*{'#' + (index+1) + '. ' + movie.title}*/}\n                                            {/*</Nav.Link>*/}\n                                        {/*</Nav.Item>*/}\n                                    {/*))}*/}\n                            {/*</Nav>*/}\n                                {/*</Card.Body>*/}\n                            {/*</Card>*/}\n                        {/*</Col>*/}\n                        {/*<Col md={9} >*/}\n                            {/*<Card body>*/}\n                            {/*<Tab.Content>*/}\n                                {/*{this.props.propertyList.map((movie, index) => (*/}\n                                    {/*<Tab.Pane key={movie._id} eventKey={movie._id} >*/}\n                                        {/*<Row>*/}\n                                            {/*<Col md={4}>*/}\n                                                {/*<Image width={200} src={movie.imageUrl}/>*/}\n                                            {/*</Col>*/}\n\n                                            {/*<Col md=\"8\">*/}\n                                                {/*<Row>*/}\n                                                    {/*<Col>*/}\n                                                    {/*<h2>{movie.title}</h2>*/}\n                                                    {/*<h3>Genre: {movie.genre}</h3>*/}\n                                                    {/*<h3>Average Rating: {movie.avgRating}</h3>*/}\n                                                    {/*</Col>*/}\n                                                {/*</Row>*/}\n                                                {/*<br/>*/}\n                                                {/*<br/>*/}\n                                                {/*<Row>*/}\n                                                    {/*<Col>*/}\n                                                    {/*{*/}\n                                                        {/*movie.actors.map((actor, index) => (*/}\n                                                            {/*<p key={actor._id}>Actor Name: {actor.actorName}, Character Name: {actor.characterName}</p>*/}\n                                                        {/*))*/}\n                                                    {/*}*/}\n                                                        {/*<>*/}\n                                                            {/*<Button variant=\"primary\" onClick={this.handleShow}>*/}\n                                                                    {/*Write a review*/}\n                                                            {/*</Button>*/}\n\n\n                                                        {/*</>*/}\n                                                    {/*</Col>*/}\n                                                {/*</Row>*/}\n                                            {/*</Col>*/}\n                                        {/*</Row>*/}\n                                        {/*<br/>*/}\n                                        {/*<br/>*/}\n                                        {/*<h3>Reviews</h3>*/}\n                                        {/*<CardColumns>*/}\n\n                                        {/*{*/}\n                                            {/*movie.reviews.map((review, index) => (*/}\n\n                                                    {/*<Card className=\"review-quote\" key={review._id}>*/}\n\n                                                        {/*<blockquote className=\"blockquote mb-0 review-card-body\">*/}\n\n                                                            {/*<p className=\"review\">*/}\n                                                                {/*{review.reviewBody}*/}\n                                                            {/*</p>*/}\n\n                                                            {/*<footer className=\"review-blockquote-footer\">*/}\n                                                                {/*<small className=\"text-muted\">*/}\n                                                                    {/*Overall Rating: {review.reviewScore} stars*/}\n                                                                {/*</small>*/}\n                                                                {/*<br/>*/}\n                                                                {/*<small className=\"text-muted\">*/}\n                                                                    {/*-{review.reviewerName}*/}\n                                                                {/*</small>*/}\n                                                            {/*</footer>*/}\n                                                        {/*</blockquote>*/}\n                                                    {/*</Card>*/}\n                                            {/*))*/}\n                                        {/*}*/}\n                                        {/*</CardColumns>*/}\n                                    {/*</Tab.Pane>*/}\n\n                                {/*))}*/}\n                            {/*</Tab.Content>*/}\n                            {/*</Card>*/}\n                        {/*</Col>*/}\n                    {/*</Row>*/}\n                {/*</Tab.Container>*/}\n                {/*<Modal show={this.state.show} onHide={this.handleClose}>*/}\n                    {/*<Modal.Header closeButton>*/}\n                        {/*<Modal.Title>Create Review</Modal.Title>*/}\n                    {/*</Modal.Header>*/}\n                    {/*<Modal.Body>*/}\n                        {/*<Form>*/}\n\n                            {/*<Form.Group as={Col} controlId=\"reviewForm.reviewBody\">*/}\n                                {/*<Form.Label>Movie Review</Form.Label>*/}\n                                {/*<Form.Control onChange={ (e) => this.handleOnChangeReviewBody(e)} type=\"text\" id=\"reviewBody\" as=\"textarea\" rows=\"3\" />*/}\n                            {/*</Form.Group>*/}\n                            {/*<Form.Group as={Col} controlId=\"reviewForm.rating\">*/}\n                                {/*<Form.Label>Rating</Form.Label>*/}\n                                {/*<DropdownButton*/}\n\n                                    {/*title={this.state.reviewRating }*/}\n                                    {/*id=\"dropdown-size-medium\"*/}\n                                    {/*onSelect={ (eventKey, event) => this.handleOnSelectRating(eventKey, event) }*/}\n                                {/*>*/}\n                                    {/*<Dropdown.Item eventKey=\"1\">1</Dropdown.Item>*/}\n                                    {/*<Dropdown.Item eventKey=\"2\">2</Dropdown.Item>*/}\n                                    {/*<Dropdown.Item eventKey=\"3\">3</Dropdown.Item>*/}\n                                    {/*<Dropdown.Item eventKey=\"4\">4</Dropdown.Item>*/}\n                                    {/*<Dropdown.Item eventKey=\"5\">5</Dropdown.Item>*/}\n                                {/*</DropdownButton>*/}\n                            {/*</Form.Group>*/}\n\n                        {/*</Form>*/}\n                    {/*</Modal.Body>*/}\n                    {/*<Modal.Footer>*/}\n                        {/*<Button variant=\"secondary\" onClick={this.handleClose}>*/}\n                            {/*Close*/}\n                        {/*</Button>*/}\n                        {/*<Button variant=\"primary\" onClick={this.handleClose}>*/}\n                            {/*Submit Review*/}\n                        {/*</Button>*/}\n                    {/*</Modal.Footer>*/}\n                {/*</Modal>*/}\n\n                <ListGroup variant=\"flush\">\n                    {this.props.propertyList.map((property, index) => (\n                        <ListGroup.Item\n                            action\n                            key={property._id}\n                            value={property._id}\n                            // active={this.props.selectedOption === movie._id}\n                            onClick={(e) => this.handleOnChangeSelectedOption(e)}\n                        >\n                            {property.name}\n                        </ListGroup.Item>\n\n                    ))}\n                </ListGroup>\n            </Container>\n\n        );\n    }\n}\n\n\nconst mapStateToProps = state => ({\n    pathname: state.router.location.pathname,\n    search: state.router.location.search,\n    hash: state.router.location.hash,\n    propertyList: state.property.titles,\n    selectedOption: state.property.selectedOption,\n    inFlight: state.property.inFlight,\n});\n\nexport default connect(mapStateToProps)(PropertyList)\n\n\n"]},"metadata":{},"sourceType":"module"}