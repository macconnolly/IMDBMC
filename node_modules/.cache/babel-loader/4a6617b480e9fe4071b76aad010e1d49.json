{"ast":null,"code":"import _classCallCheck from \"/Users/macconnolly/CS/bnbcleanings/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/macconnolly/CS/bnbcleanings/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/macconnolly/CS/bnbcleanings/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/macconnolly/CS/bnbcleanings/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/macconnolly/CS/bnbcleanings/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/macconnolly/CS/bnbcleanings/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/macconnolly/CS/bnbcleanings/src/components/propertyList.js\";\nimport React, { Component } from 'react';\nimport { CardColumns, Col, Image, ListGroup, Nav, Row, Tab, Modal, Button, Form, DropdownButton, Dropdown } from 'react-bootstrap';\nimport { fetchAllProperties, updateSelectedMovie, createReview } from '../actions/movieActions';\nimport { connect } from \"react-redux\";\nimport { replace, push } from 'connected-react-router';\nimport Card from \"react-bootstrap/Card\";\nimport Container from \"react-bootstrap/Container\";\nimport Cookies from 'js-cookie';\nimport '../App.css';\n\nvar PropertyList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PropertyList, _Component);\n\n  function PropertyList(props) {\n    var _this;\n\n    _classCallCheck(this, PropertyList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PropertyList).call(this, props));\n\n    _this.handleOnSelectRating = function (eventKey, event) {\n      _this.setState({\n        reviewRating: eventKey\n      });\n\n      console.log('rating: ' + _this.state.reviewRating);\n    };\n\n    _this.handleOnChangeReviewBody = function (event) {\n      _this.setState({\n        reviewBody: event.target.value\n      });\n\n      console.log('review: ' + _this.state.reviewBody);\n    };\n\n    _this.handleOnChangeSelectedOption = function (e) {\n      console.log('value of e is ' + e);\n\n      _this.props.dispatch(updateSelectedMovie(e));\n\n      _this.props.dispatch(replace('/properties/#/' + e));\n    };\n\n    _this.handleShow = _this.handleShow.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleClose = _this.handleClose.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      show: false,\n      reviewRating: 'Select rating',\n      reviewBody: ''\n    };\n    return _this;\n  } // handleSelect(key) {\n  //     console.log('selected' + key);\n  //     this.setState({ key: key });\n  // }\n\n\n  _createClass(PropertyList, [{\n    key: \"handleClose\",\n    value: function handleClose() {\n      var token = Cookies.get('token');\n      var data = {\n        reviewBody: this.state.reviewBody,\n        reviewScore: this.state.reviewRating,\n        movieID: this.props.selectedOption\n      };\n      this.props.dispatch(createReview(data, token));\n      this.setState({\n        show: false,\n        reviewRating: 'Select rating',\n        reviewBody: ''\n      });\n      this.props.dispatch(fetchAllProperties(Cookies.get('token')));\n    }\n  }, {\n    key: \"handleShow\",\n    value: function handleShow() {\n      this.setState({\n        show: true\n      });\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var hash = this.props.hash.substr(2);\n      var currentMovieID = this.props.selectedOption;\n      console.log('hash: ' + hash);\n      console.log('selectedOption: ' + currentMovieID);\n\n      if (this.props.hash !== \"\" && currentMovieID === \"\") {\n        this.props.dispatch(updateSelectedMovie(hash));\n      }\n\n      this.props.dispatch(fetchAllProperties());\n      console.log('comp will mount');\n      console.log(this.props); //\n      // console.log('Component WILL MOUNT!');\n      // console.log('hash: ' + this.props.hash)\n      // console.log('selected option: ' + this.props.selectedOption);\n      // //this.props.dispatch(fetchAllProperties(checkCookie()));\n      // console.log('selected option: ' + this.props.selectedOption);\n      // if(this.props.selectedOption === \"\"){\n      //\n      //     this.props.dispatch(fetchAllProperties(checkCookie()));\n      //     this.props.dispatch(updateSelectedMovie(this.props.hash.substr(2)));\n      // }\n      // else {\n      //\n      //     this.props.dispatch(updateSelectedMovie(this.props.selectedOption));\n      //\n      // }\n      //updateSelectedMovie(this.props.hash.substr(2));\n      // console.log('selected option: ' + this.props.selectedOption);\n      //\n      //this.props.dispatch(fetchAllProperties(checkCookie()));\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(newProps) {\n      //console.log('comp will receive props: ' )\n      console.log(newProps); //var newPropsObject = JSON.parse(newProps);\n      //var result = newPropsObject[0];\n      //console.log(JSON.parse(newProps))\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate(nextProps, nextState) {\n      console.log('comp will update');\n      console.log(this.props); // let hash = this.props.hash.substr(2);\n      // let currentPropertyID = this.props.selectedOption;\n      // if(hash === '' && currentPropertyID == ''){\n      //     let m = nextProps.propertyList[0]._id\n      //     console.log(m)\n      //     this.handleOnChangeSelectedOption(m);\n      // }\n      //const firstMovie = JSON.parse(nextProps.propertyList[0]._id)\n      //this.handleOnChangeSelectedOption(firstMovie)\n      // console.log('comp will update')\n      // if(this.props.selectedOption === '') {\n      //     let firstMovie = nextProps.propertyList[0]._id\n      //     this.handleOnChangeSelectedOption(firstMovie);\n      // }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {//updateSelectedMovie(prevProps.hash.substr(2))\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      console.log('comp will unmount');\n      console.log(this.props);\n    } // handleOnLoadMovies = (token) => {\n    //     this.handleOnChangeSelectedOption(this.props.selectedOption || this.props.hash.substr(2));\n    //     this.props.dispatch(fetchAllProperties(token));\n    //\n    //\n    //\n    // };\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // if(this.props.selectedOption === \"\"){\n      //     this.props.dispatch(updateSelectedMovie(this.props.propertyList[0]._id));\n      // }\n      console.log('comp did mount');\n      console.log(this.props);\n      this.props.dispatch(fetchAllProperties()); //this.handleOnChangeSelectedOption(this.props.hash.substr(2))\n      //this.props.dispatch(fetchAllProperties(checkCookie()));\n      //this.props.dispatch(updateSelectedMovie(this.props.selectedOption));\n      //this.props.dispatch(replace('/movies/#/' + this.props.selectedOption));\n      //console.log('comp did mount')\n      //this.props.dispatch(updateSelectedMovie(this.props.hash.substr(2)));\n    }\n  }, {\n    key: \"render\",\n    // handleOnLoadMovies = (token) => {\n    //     this.props.dispatch(fetchAllProperties(token)).then((response) => {\n    //         console.log('MOVIES RETURNED - UPDATE STATE' + response);\n    //         this.props.dispatch(updateSelectedMovie(this.props.hash.substr(2)))\n    //\n    //     }).catch((error) => {\n    //         console.log('ERROR')\n    //     }));\n    //\n    // };\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Container, {\n        className: \"movie-list-tabbed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, React.createElement(Tab.Container, {\n        id: \"moviestabs\",\n        defaultActiveKey: \"a\",\n        activeKey: this.props.selectedOption,\n        mountOnEnter: false,\n        onSelect: function onSelect(e) {\n          return _this2.handleOnChangeSelectedOption(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 9,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, React.createElement(Card, {\n        body: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, React.createElement(Tab.Content, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, this.props.propertyList.titles.map(function (movie, index) {\n        return React.createElement(Tab.Pane, {\n          key: movie._id,\n          eventKey: movie._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 261\n          },\n          __self: this\n        }, React.createElement(Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 262\n          },\n          __self: this\n        }, React.createElement(Col, {\n          md: 4,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 263\n          },\n          __self: this\n        }, React.createElement(Image, {\n          width: 200,\n          src: movie.imageUrl,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 264\n          },\n          __self: this\n        })), React.createElement(Col, {\n          md: \"8\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 267\n          },\n          __self: this\n        }, React.createElement(Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 268\n          },\n          __self: this\n        }, React.createElement(Col, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 269\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 270\n          },\n          __self: this\n        }, movie.name))), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 274\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 275\n          },\n          __self: this\n        }), React.createElement(Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 276\n          },\n          __self: this\n        }, React.createElement(Col, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 277\n          },\n          __self: this\n        }, movie.cleanings.map(function (actor, index) {\n          return React.createElement(\"div\", {\n            key: actor._id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 280\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 281\n            },\n            __self: this\n          }, \"Cleaned: \", actor.cleaned ? \"Yes!\" : \"No y'all gotta clean\"), React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 282\n            },\n            __self: this\n          }, \" Start: \", new Date(actor.start).toDateString(), \" \"), React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 283\n            },\n            __self: this\n          }, new Date(actor.end).toDateString()), React.createElement(\"hr\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 284\n            },\n            __self: this\n          }), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 285\n            },\n            __self: this\n          }), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 286\n            },\n            __self: this\n          }));\n        }), React.createElement(React.Fragment, null, React.createElement(Button, {\n          variant: \"primary\",\n          onClick: _this2.handleShow,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 292\n          },\n          __self: this\n        }, \"Write a review\")))))), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 302\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 303\n          },\n          __self: this\n        }), React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 304\n          },\n          __self: this\n        }, \"Reviews\"), React.createElement(CardColumns, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 305\n          },\n          __self: this\n        }));\n      })))))), React.createElement(Modal, {\n        show: this.state.show,\n        onHide: this.handleClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340\n        },\n        __self: this\n      }, React.createElement(Modal.Header, {\n        closeButton: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341\n        },\n        __self: this\n      }, React.createElement(Modal.Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        },\n        __self: this\n      }, \"Create Review\")), React.createElement(Modal.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344\n        },\n        __self: this\n      }, React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        as: Col,\n        controlId: \"reviewForm.reviewBody\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348\n        },\n        __self: this\n      }, \"Movie Review\"), React.createElement(Form.Control, {\n        onChange: function onChange(e) {\n          return _this2.handleOnChangeReviewBody(e);\n        },\n        type: \"text\",\n        id: \"reviewBody\",\n        as: \"textarea\",\n        rows: \"3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349\n        },\n        __self: this\n      })), React.createElement(Form.Group, {\n        as: Col,\n        controlId: \"reviewForm.rating\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352\n        },\n        __self: this\n      }, \"Rating\"), React.createElement(DropdownButton, {\n        title: this.state.reviewRating,\n        id: \"dropdown-size-medium\",\n        onSelect: function onSelect(eventKey, event) {\n          return _this2.handleOnSelectRating(eventKey, event);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353\n        },\n        __self: this\n      }, React.createElement(Dropdown.Item, {\n        eventKey: \"1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359\n        },\n        __self: this\n      }, \"1\"), React.createElement(Dropdown.Item, {\n        eventKey: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360\n        },\n        __self: this\n      }, \"2\"), React.createElement(Dropdown.Item, {\n        eventKey: \"3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361\n        },\n        __self: this\n      }, \"3\"), React.createElement(Dropdown.Item, {\n        eventKey: \"4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362\n        },\n        __self: this\n      }, \"4\"), React.createElement(Dropdown.Item, {\n        eventKey: \"5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363\n        },\n        __self: this\n      }, \"5\"))))), React.createElement(Modal.Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"secondary\",\n        onClick: this.handleClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370\n        },\n        __self: this\n      }, \"Close\"), React.createElement(Button, {\n        variant: \"primary\",\n        onClick: this.handleClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373\n        },\n        __self: this\n      }, \"Submit Review\"))));\n    }\n  }]);\n\n  return PropertyList;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    pathname: state.router.location.pathname,\n    search: state.router.location.search,\n    hash: state.router.location.hash,\n    propertyList: state.property,\n    selectedOption: state.property.selectedOption,\n    inFlight: state.property.inFlight\n  };\n};\n\nexport default connect(mapStateToProps)(PropertyList);","map":{"version":3,"sources":["/Users/macconnolly/CS/bnbcleanings/src/components/propertyList.js"],"names":["React","Component","CardColumns","Col","Image","ListGroup","Nav","Row","Tab","Modal","Button","Form","DropdownButton","Dropdown","fetchAllProperties","updateSelectedMovie","createReview","connect","replace","push","Card","Container","Cookies","PropertyList","props","handleOnSelectRating","eventKey","event","setState","reviewRating","console","log","state","handleOnChangeReviewBody","reviewBody","target","value","handleOnChangeSelectedOption","e","dispatch","handleShow","bind","handleClose","show","token","get","data","reviewScore","movieID","selectedOption","hash","substr","currentMovieID","newProps","nextProps","nextState","prevProps","prevState","propertyList","titles","map","movie","index","_id","imageUrl","name","cleanings","actor","cleaned","Date","start","toDateString","end","mapStateToProps","pathname","router","location","search","property","inFlight"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {\n    CardColumns,\n    Col,\n    Image,\n    ListGroup,\n    Nav,\n    Row,\n    Tab,\n    Modal,\n    Button,\n    Form,\n    DropdownButton,\n    Dropdown\n} from 'react-bootstrap';\nimport {fetchAllProperties, updateSelectedMovie, createReview} from '../actions/movieActions';\nimport {connect} from \"react-redux\";\nimport { replace, push } from 'connected-react-router'\nimport Card from \"react-bootstrap/Card\";\nimport Container from \"react-bootstrap/Container\";\nimport Cookies from 'js-cookie';\nimport '../App.css'\n\n\n\nclass PropertyList extends Component {\n    constructor(props) {\n\n        super(props);\n\n        this.handleShow = this.handleShow.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n\n        this.state = {\n            show: false,\n            reviewRating: 'Select rating',\n            reviewBody: ''\n        };\n    }\n\n    // handleSelect(key) {\n    //     console.log('selected' + key);\n    //     this.setState({ key: key });\n    // }\n\n    handleOnSelectRating = (eventKey, event) => {\n        this.setState({\n            reviewRating: eventKey\n        });\n        console.log('rating: ' + this.state.reviewRating);\n    };\n\n    handleOnChangeReviewBody=(event)=>\n    {\n        this.setState({reviewBody: event.target.value});\n        console.log('review: ' + this.state.reviewBody);\n    };\n\n    handleClose() {\n\n        let token = Cookies.get('token');\n        var data = {\n            reviewBody: this.state.reviewBody,\n            reviewScore: this.state.reviewRating,\n            movieID: this.props.selectedOption\n        };\n        this.props.dispatch(createReview(data, token));\n        this.setState({\n            show: false,\n            reviewRating: 'Select rating',\n            reviewBody: ''});\n\n        this.props.dispatch(fetchAllProperties(Cookies.get('token')));\n\n    }\n\n    handleShow() {\n        this.setState({ show: true });\n    }\n\n    componentWillMount() {\n\n        let hash = this.props.hash.substr(2);\n        let currentMovieID = this.props.selectedOption;\n        console.log('hash: ' + hash);\n        console.log('selectedOption: ' + currentMovieID);\n        if (this.props.hash !== \"\" && currentMovieID === \"\"){\n            this.props.dispatch(updateSelectedMovie(hash));\n        }\n        this.props.dispatch(fetchAllProperties());\n\n\n\n        console.log('comp will mount')\n        console.log(this.props);\n\n        //\n        // console.log('Component WILL MOUNT!');\n        // console.log('hash: ' + this.props.hash)\n        // console.log('selected option: ' + this.props.selectedOption);\n        // //this.props.dispatch(fetchAllProperties(checkCookie()));\n        // console.log('selected option: ' + this.props.selectedOption);\n\n\n        // if(this.props.selectedOption === \"\"){\n        //\n        //     this.props.dispatch(fetchAllProperties(checkCookie()));\n        //     this.props.dispatch(updateSelectedMovie(this.props.hash.substr(2)));\n        // }\n        // else {\n        //\n        //     this.props.dispatch(updateSelectedMovie(this.props.selectedOption));\n        //\n        // }\n        //updateSelectedMovie(this.props.hash.substr(2));\n        // console.log('selected option: ' + this.props.selectedOption);\n        //\n\n        //this.props.dispatch(fetchAllProperties(checkCookie()));\n\n\n\n\n\n\n    }\n    componentWillReceiveProps(newProps) {\n        //console.log('comp will receive props: ' )\n\n        console.log(newProps)\n\n        //var newPropsObject = JSON.parse(newProps);\n        //var result = newPropsObject[0];\n        //console.log(JSON.parse(newProps))\n\n    }\n\n    componentWillUpdate(nextProps, nextState) {\n        console.log('comp will update')\n        console.log(this.props);\n\n        // let hash = this.props.hash.substr(2);\n        // let currentPropertyID = this.props.selectedOption;\n\n        // if(hash === '' && currentPropertyID == ''){\n        //     let m = nextProps.propertyList[0]._id\n        //     console.log(m)\n        //     this.handleOnChangeSelectedOption(m);\n        // }\n\n\n        //const firstMovie = JSON.parse(nextProps.propertyList[0]._id)\n        //this.handleOnChangeSelectedOption(firstMovie)\n        // console.log('comp will update')\n        // if(this.props.selectedOption === '') {\n        //     let firstMovie = nextProps.propertyList[0]._id\n        //     this.handleOnChangeSelectedOption(firstMovie);\n        // }\n\n    }\n    componentDidUpdate(prevProps, prevState) {\n        //updateSelectedMovie(prevProps.hash.substr(2))\n\n\n\n    }\n    componentWillUnmount() {\n        console.log('comp will unmount')\n        console.log(this.props)\n\n    }\n\n    // handleOnLoadMovies = (token) => {\n    //     this.handleOnChangeSelectedOption(this.props.selectedOption || this.props.hash.substr(2));\n    //     this.props.dispatch(fetchAllProperties(token));\n    //\n    //\n    //\n    // };\n\n    componentDidMount() {\n\n\n        // if(this.props.selectedOption === \"\"){\n        //     this.props.dispatch(updateSelectedMovie(this.props.propertyList[0]._id));\n        // }\n        console.log('comp did mount')\n        console.log(this.props);\n        this.props.dispatch(fetchAllProperties());\n\n        //this.handleOnChangeSelectedOption(this.props.hash.substr(2))\n\n\n\n\n        //this.props.dispatch(fetchAllProperties(checkCookie()));\n        //this.props.dispatch(updateSelectedMovie(this.props.selectedOption));\n\n\n        //this.props.dispatch(replace('/movies/#/' + this.props.selectedOption));\n\n        //console.log('comp did mount')\n\n        //this.props.dispatch(updateSelectedMovie(this.props.hash.substr(2)));\n\n    }\n    handleOnChangeSelectedOption = (e) => {\n        console.log('value of e is ' + e);\n        this.props.dispatch(updateSelectedMovie(e));\n        this.props.dispatch(replace('/properties/#/' + e));\n\n    };\n    // handleOnLoadMovies = (token) => {\n    //     this.props.dispatch(fetchAllProperties(token)).then((response) => {\n    //         console.log('MOVIES RETURNED - UPDATE STATE' + response);\n    //         this.props.dispatch(updateSelectedMovie(this.props.hash.substr(2)))\n    //\n    //     }).catch((error) => {\n    //         console.log('ERROR')\n    //     }));\n    //\n    // };\n\n\n\n\n\n\n\n\n    render() {\n\n        return (\n            <Container className='movie-list-tabbed'>\n                {/*{*/}\n                    {/*(this.props.inFlight ? 'loading' : '')*/}\n                {/*}*/}\n                <Tab.Container id=\"moviestabs\" defaultActiveKey='a' activeKey={this.props.selectedOption} mountOnEnter={false}  onSelect={(e) => this.handleOnChangeSelectedOption(e) } >\n                    <Row>\n                        {/*<Col md={3}>*/}\n                            {/*<Card>*/}\n                                {/*<Card.Header>Top Rated Movies</Card.Header>*/}\n                                {/*<Card.Body>*/}\n                            {/*<Nav variant=\"pills\" className=\"flex-column\" activeKey={this.props.selectedOption}  >*/}\n                                    {/*{*/}\n                                        {/*this.props.propertyList.titles.map((property, index) => (*/}\n                                        {/*<Nav.Item key={property._id} >*/}\n                                            {/*<Nav.Link eventKey={property._id}>*/}\n                                                {/*{'#' + (index+1) + '. ' + property.name}*/}\n                                            {/*</Nav.Link>*/}\n                                        {/*</Nav.Item>*/}\n                                    {/*))}*/}\n                            {/*</Nav>*/}\n                                {/*</Card.Body>*/}\n                            {/*</Card>*/}\n                        {/*</Col>*/}\n                        <Col md={9} >\n                            <Card body>\n                            <Tab.Content>\n                                {this.props.propertyList.titles.map((movie, index) => (\n                                    <Tab.Pane key={movie._id} eventKey={movie._id} >\n                                        <Row>\n                                            <Col md={4}>\n                                                <Image width={200} src={movie.imageUrl}/>\n                                            </Col>\n\n                                            <Col md=\"8\">\n                                                <Row>\n                                                    <Col>\n                                                    <h2>{movie.name}</h2>\n\n                                                    </Col>\n                                                </Row>\n                                                <br/>\n                                                <br/>\n                                                <Row>\n                                                    <Col>\n                                                    {\n                                                        movie.cleanings.map((actor, index) => (\n                                                            <div key={actor._id}>\n                                                        <p >Cleaned: {actor.cleaned ? \"Yes!\" : \"No y'all gotta clean\"}</p>\n                                                        <p> Start: {new Date(actor.start).toDateString()} </p>\n                                                        <p>{new Date(actor.end).toDateString()}</p>\n                                                                <hr />\n                                                                <br />\n                                                                <br />\n                                                            </div>\n\n                                                        ))\n                                                    }\n                                                        <>\n                                                            <Button variant=\"primary\" onClick={this.handleShow}>\n                                                                    Write a review\n                                                            </Button>\n\n\n                                                        </>\n                                                    </Col>\n                                                </Row>\n                                            </Col>\n                                        </Row>\n                                        <br/>\n                                        <br/>\n                                        <h3>Reviews</h3>\n                                        <CardColumns>\n\n                                        {/*{*/}\n                                            {/*movie.reviews.map((review, index) => (*/}\n\n                                                    {/*<Card className=\"review-quote\" key={review._id}>*/}\n\n                                                        {/*<blockquote className=\"blockquote mb-0 review-card-body\">*/}\n\n                                                            {/*<p className=\"review\">*/}\n                                                                {/*{review.reviewBody}*/}\n                                                            {/*</p>*/}\n\n                                                            {/*<footer className=\"review-blockquote-footer\">*/}\n                                                                {/*<small className=\"text-muted\">*/}\n                                                                    {/*Overall Rating: {review.reviewScore} stars*/}\n                                                                {/*</small>*/}\n                                                                {/*<br/>*/}\n                                                                {/*<small className=\"text-muted\">*/}\n                                                                    {/*-{review.reviewerName}*/}\n                                                                {/*</small>*/}\n                                                            {/*</footer>*/}\n                                                        {/*</blockquote>*/}\n                                                    {/*</Card>*/}\n                                            {/*))*/}\n                                        {/*}*/}\n                                        </CardColumns>\n                                    </Tab.Pane>\n\n                                ))}\n                            </Tab.Content>\n                            </Card>\n                        </Col>\n                    </Row>\n                </Tab.Container>\n                <Modal show={this.state.show} onHide={this.handleClose}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Create Review</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Form>\n\n                            <Form.Group as={Col} controlId=\"reviewForm.reviewBody\">\n                                <Form.Label>Movie Review</Form.Label>\n                                <Form.Control onChange={ (e) => this.handleOnChangeReviewBody(e)} type=\"text\" id=\"reviewBody\" as=\"textarea\" rows=\"3\" />\n                            </Form.Group>\n                            <Form.Group as={Col} controlId=\"reviewForm.rating\">\n                                <Form.Label>Rating</Form.Label>\n                                <DropdownButton\n\n                                    title={this.state.reviewRating }\n                                    id=\"dropdown-size-medium\"\n                                    onSelect={ (eventKey, event) => this.handleOnSelectRating(eventKey, event) }\n                                >\n                                    <Dropdown.Item eventKey=\"1\">1</Dropdown.Item>\n                                    <Dropdown.Item eventKey=\"2\">2</Dropdown.Item>\n                                    <Dropdown.Item eventKey=\"3\">3</Dropdown.Item>\n                                    <Dropdown.Item eventKey=\"4\">4</Dropdown.Item>\n                                    <Dropdown.Item eventKey=\"5\">5</Dropdown.Item>\n                                </DropdownButton>\n                            </Form.Group>\n\n                        </Form>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={this.handleClose}>\n                            Close\n                        </Button>\n                        <Button variant=\"primary\" onClick={this.handleClose}>\n                            Submit Review\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </Container>\n\n        );\n    }\n}\n\n\nconst mapStateToProps = state => ({\n    pathname: state.router.location.pathname,\n    search: state.router.location.search,\n    hash: state.router.location.hash,\n    propertyList: state.property,\n    selectedOption: state.property.selectedOption,\n    inFlight: state.property.inFlight,\n});\n\nexport default connect(mapStateToProps)(PropertyList)\n\n\n"]},"metadata":{},"sourceType":"module"}