{"ast":null,"code":"import _classCallCheck from \"/Users/macconnolly/CS/bnbcleanings/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/macconnolly/CS/bnbcleanings/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/macconnolly/CS/bnbcleanings/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/macconnolly/CS/bnbcleanings/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/macconnolly/CS/bnbcleanings/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/macconnolly/CS/bnbcleanings/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/macconnolly/CS/bnbcleanings/src/components/cleanerDetail.js\";\nimport React, { Component } from 'react';\nimport { CardColumns, Col, Image, ListGroup, Nav, Row, Tab, Modal, Button, Form, DropdownButton, Dropdown, Table } from 'react-bootstrap';\nimport { fetchAllProperties, updateSelectedMovie, createReview } from '../actions/movieActions';\nimport { connect } from \"react-redux\";\nimport { replace, push } from 'connected-react-router';\nimport Card from \"react-bootstrap/Card\";\nimport Container from \"react-bootstrap/Container\";\nimport Cookies from 'js-cookie';\nimport '../App.css';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport BootstrapTable from 'react-bootstrap-table-next';\n\nvar CleanerDetail =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CleanerDetail, _Component);\n\n  function CleanerDetail(props) {\n    var _this;\n\n    _classCallCheck(this, CleanerDetail);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CleanerDetail).call(this, props));\n\n    _this.handleOnSelectRating = function (eventKey, event) {\n      _this.setState({\n        reviewRating: eventKey\n      });\n\n      console.log('rating: ' + _this.state.reviewRating);\n    };\n\n    _this.handleOnChangeReviewBody = function (event) {\n      _this.setState({\n        reviewBody: event.target.value\n      });\n\n      console.log('review: ' + _this.state.reviewBody);\n    };\n\n    _this.handleOnChangeSelectedOption = function (e) {\n      console.log('value of e is ' + e);\n\n      _this.props.dispatch(updateSelectedMovie(e));\n\n      _this.props.dispatch(replace('/properties/#/' + e));\n    };\n\n    _this.handleShow = _this.handleShow.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleClose = _this.handleClose.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.lookupProperty = _this.lookupProperty.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    var products = [];\n    var columns = [{\n      dataField: '_id',\n      text: 'id'\n    }, {\n      dataField: 'start',\n      text: 'Start'\n    }, {\n      dataField: 'end',\n      text: 'Deadline'\n    }, {\n      dataField: 'cleaned',\n      text: 'Status'\n    }];\n    _this.state = {\n      show: false,\n      reviewRating: 'Select rating',\n      reviewBody: '',\n      cleanings: [],\n      columns: columns\n    };\n    return _this;\n  } // handleSelect(key) {\n  //     console.log('selected' + key);\n  //     this.setState({ key: key });\n  // }\n\n\n  _createClass(CleanerDetail, [{\n    key: \"handleClose\",\n    value: function handleClose() {\n      var token = Cookies.get('token');\n      var data = {\n        reviewBody: this.state.reviewBody,\n        reviewScore: this.state.reviewRating,\n        movieID: this.props.selectedOption\n      };\n      this.props.dispatch(createReview(data, token));\n      this.setState({\n        show: false,\n        reviewRating: 'Select rating',\n        reviewBody: ''\n      });\n      this.props.dispatch(fetchAllProperties());\n    }\n  }, {\n    key: \"handleShow\",\n    value: function handleShow() {\n      this.setState({\n        show: true\n      });\n    }\n  }, {\n    key: \"lookupProperty\",\n    value: function lookupProperty(id) {\n      var parameters = {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      var property = {};\n      fetch(\"http://localhost:8080/properties/\".concat(id), parameters).then(function (response) {\n        console.log('properties fetch callback json first response: ' + JSON.stringify(response));\n        return response.json();\n      }).then(function (json) {\n        console.log('properties fetch callback json response' + JSON.stringify(json));\n        var data = JSON.parse(JSON.stringify(json));\n        console.log('this is my ref' + json.properties);\n        property = json.properties;\n        return json;\n      });\n      console.log('property' + property);\n      console.log(property);\n      return property;\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var hash = this.props.hash.substr(2);\n      var currentCleanerID = hash;\n      console.log('hash: ' + hash);\n      console.log('selectedOption: ' + currentCleanerID); // if (this.props.hash !== \"\" && currentCleanerID === \"\"){\n      //     this.props.dispatch(updateSelectedMovie(hash));\n      // }\n      // this.props.dispatch(fetchAllProperties());\n\n      this.getAllCleanings();\n      this.getAllProperties();\n      console.log('comp will mount cleanerdetail');\n      console.log(this.props); //\n      // console.log('Component WILL MOUNT!');\n      // console.log('hash: ' + this.props.hash)\n      // console.log('selected option: ' + this.props.selectedOption);\n      // //this.props.dispatch(fetchAllProperties(checkCookie()));\n      // console.log('selected option: ' + this.props.selectedOption);\n      // if(this.props.selectedOption === \"\"){\n      //\n      //     this.props.dispatch(fetchAllProperties(checkCookie()));\n      //     this.props.dispatch(updateSelectedMovie(this.props.hash.substr(2)));\n      // }\n      // else {\n      //\n      //     this.props.dispatch(updateSelectedMovie(this.props.selectedOption));\n      //\n      // }\n      //updateSelectedMovie(this.props.hash.substr(2));\n      // console.log('selected option: ' + this.props.selectedOption);\n      //\n      //this.props.dispatch(fetchAllProperties(checkCookie()));\n    }\n  }, {\n    key: \"getAllCleanings\",\n    value: function getAllCleanings() {\n      var _this2 = this;\n\n      var hash = this.props.hash.substr(2);\n      var currentCleanerID = hash;\n      var parameters = {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      return fetch(\"http://localhost:8080/cleaners/\".concat(currentCleanerID, \"/cleanings\"), parameters).then(function (response) {\n        console.log('cleaners fetch callback json first response: ' + JSON.stringify(response));\n        return response.json();\n      }).then(function (json) {\n        console.log('cleaners fetch callback json response' + JSON.stringify(json));\n        var data = JSON.parse(JSON.stringify(json));\n        console.log(data.cleaners);\n\n        _this2.setState({\n          \"cleanings\": data.cleanings,\n          \"cleanerID\": currentCleanerID\n        });\n\n        _this2.state.cleanings.map(function (cleaning, index) {\n          return console.log(_this2.lookupProperty(cleaning.property));\n        });\n\n        return json;\n      });\n    }\n  }, {\n    key: \"getAllProperties\",\n    value: function getAllProperties() {\n      var _this3 = this;\n\n      var parameters = {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      return fetch(\"http://localhost:8080/properties?cleanings=true\", parameters).then(function (response) {\n        console.log('properties fetch callback json first response: ' + JSON.stringify(response));\n        return response.json();\n      }).then(function (json) {\n        console.log('cleaners fetch callback json response' + JSON.stringify(json));\n        var data = JSON.parse(JSON.stringify(json));\n        console.log(data.cleaners);\n\n        _this3.setState({\n          \"properties\": data.properties\n        });\n\n        return json;\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(newProps) {\n      //console.log('comp will receive props: ' )\n      console.log('willReceiveProps');\n      console.log(newProps); //var newPropsObject = JSON.parse(newProps);\n      //var result = newPropsObject[0];\n      //console.log(JSON.parse(newProps))\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate(nextProps, nextState) {\n      console.log('comp will update');\n      console.log(nextProps); //this.handleOnChangeSelectedOption(this.props.hash.substr(2))\n      // if(this.props.selectedOption === \"\"){\n      //     this.props.dispatch(updateSelectedMovie(nextProps.propertyList.titles[0]._id));\n      // }\n\n      var hash = this.props.hash.substr(2);\n      var currentPropertyID = this.props.selectedOption;\n\n      if (hash === '' && currentPropertyID == '') {\n        var m = nextProps.propertyList.titles[0]._id;\n        console.log(m);\n        this.handleOnChangeSelectedOption(m);\n      } //const firstMovie = JSON.parse(nextProps.propertyList[0]._id)\n      //this.handleOnChangeSelectedOption(firstMovie)\n      // console.log('comp will update')\n      // if(this.props.selectedOption === '') {\n      //     let firstMovie = nextProps.propertyList[0]._id\n      //     this.handleOnChangeSelectedOption(firstMovie);\n      // }\n\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {// updateSelectedMovie(prevProps.hash.substr(2))\n      // console.log('new debug')\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      console.log('comp will unmount');\n      console.log(this.props);\n    } // handleOnLoadMovies = (token) => {\n    //     this.handleOnChangeSelectedOption(this.props.selectedOption || this.props.hash.substr(2));\n    //     this.props.dispatch(fetchAllProperties(token));\n    //\n    //\n    //\n    // };\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log('comp did mount state');\n      console.log(this.state); // console.log(this.props);\n      // this.props.dispatch(fetchAllProperties());\n      //\n      // let hash = this.props.hash.substr(2);\n      // let currentPropertyID = this.props.selectedOption;\n      //\n      // if(hash === '' && currentPropertyID == ''){\n      //     let m = this.propertyList.titles[0]._id\n      //     console.log(m)\n      //     this.handleOnChangeSelectedOption(m);\n      // }\n      //this.props.dispatch(fetchAllProperties(checkCookie()));\n      //this.props.dispatch(updateSelectedMovie(this.props.selectedOption));\n      //this.props.dispatch(replace('/movies/#/' + this.props.selectedOption));\n      //console.log('comp did mount')\n      //this.props.dispatch(updateSelectedMovie(this.props.hash.substr(2)));\n    }\n  }, {\n    key: \"render\",\n    // handleOnLoadMovies = (token) => {\n    //     this.props.dispatch(fetchAllProperties(token)).then((response) => {\n    //         console.log('MOVIES RETURNED - UPDATE STATE' + response);\n    //         this.props.dispatch(updateSelectedMovie(this.props.hash.substr(2)))\n    //\n    //     }).catch((error) => {\n    //         console.log('ERROR')\n    //     }));\n    //\n    // };\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(Container, {\n        className: \"movie-list-tabbed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339\n        },\n        __self: this\n      }, React.createElement(Tab.Container, {\n        id: \"moviestabs\",\n        defaultActiveKey: \"a\",\n        activeKey: this.props.selectedOption,\n        mountOnEnter: false,\n        onSelect: function onSelect(e) {\n          return _this4.handleOnChangeSelectedOption(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 9,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346\n        },\n        __self: this\n      }, React.createElement(Card, {\n        body: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347\n        },\n        __self: this\n      }, this.state.cleanings && this.state.properties && this.state.cleanings.map(function (cleaning, index) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 368\n          },\n          __self: this\n        }, cleaning.start, cleaning.end, cleaning.property, _this4.state.properties.find(function (property) {\n          return property._id === cleaning.property;\n        }).name, cleaning.cleaned);\n      }), React.createElement(BootstrapTable, {\n        keyField: \"_id\",\n        data: this.state.cleanings,\n        columns: this.state.columns,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382\n        },\n        __self: this\n      }))))), React.createElement(Modal, {\n        show: this.state.show,\n        onHide: this.handleClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388\n        },\n        __self: this\n      }, React.createElement(Modal.Header, {\n        closeButton: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389\n        },\n        __self: this\n      }, React.createElement(Modal.Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390\n        },\n        __self: this\n      }, \"Create Review\")), React.createElement(Modal.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392\n        },\n        __self: this\n      }, React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        as: Col,\n        controlId: \"reviewForm.reviewBody\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396\n        },\n        __self: this\n      }, \"Movie Review\"), React.createElement(Form.Control, {\n        onChange: function onChange(e) {\n          return _this4.handleOnChangeReviewBody(e);\n        },\n        type: \"text\",\n        id: \"reviewBody\",\n        as: \"textarea\",\n        rows: \"3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397\n        },\n        __self: this\n      })), React.createElement(Form.Group, {\n        as: Col,\n        controlId: \"reviewForm.rating\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400\n        },\n        __self: this\n      }, \"Rating\"), React.createElement(DropdownButton, {\n        title: this.state.reviewRating,\n        id: \"dropdown-size-medium\",\n        onSelect: function onSelect(eventKey, event) {\n          return _this4.handleOnSelectRating(eventKey, event);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401\n        },\n        __self: this\n      }, React.createElement(Dropdown.Item, {\n        eventKey: \"1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407\n        },\n        __self: this\n      }, \"1\"), React.createElement(Dropdown.Item, {\n        eventKey: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408\n        },\n        __self: this\n      }, \"2\"), React.createElement(Dropdown.Item, {\n        eventKey: \"3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409\n        },\n        __self: this\n      }, \"3\"), React.createElement(Dropdown.Item, {\n        eventKey: \"4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410\n        },\n        __self: this\n      }, \"4\"), React.createElement(Dropdown.Item, {\n        eventKey: \"5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411\n        },\n        __self: this\n      }, \"5\"))))), React.createElement(Modal.Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"secondary\",\n        onClick: this.handleClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418\n        },\n        __self: this\n      }, \"Close\"), React.createElement(Button, {\n        variant: \"primary\",\n        onClick: this.handleClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421\n        },\n        __self: this\n      }, \"Submit Review\"))));\n    }\n  }]);\n\n  return CleanerDetail;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    pathname: state.router.location.pathname,\n    search: state.router.location.search,\n    hash: state.router.location.hash,\n    propertyList: state.property,\n    selectedOption: state.property.selectedOption,\n    inFlight: state.property.inFlight\n  };\n};\n\nexport default connect(mapStateToProps)(CleanerDetail);","map":{"version":3,"sources":["/Users/macconnolly/CS/bnbcleanings/src/components/cleanerDetail.js"],"names":["React","Component","CardColumns","Col","Image","ListGroup","Nav","Row","Tab","Modal","Button","Form","DropdownButton","Dropdown","Table","fetchAllProperties","updateSelectedMovie","createReview","connect","replace","push","Card","Container","Cookies","BootstrapTable","CleanerDetail","props","handleOnSelectRating","eventKey","event","setState","reviewRating","console","log","state","handleOnChangeReviewBody","reviewBody","target","value","handleOnChangeSelectedOption","e","dispatch","handleShow","bind","handleClose","lookupProperty","products","columns","dataField","text","show","cleanings","token","get","data","reviewScore","movieID","selectedOption","id","parameters","method","headers","property","fetch","then","response","JSON","stringify","json","parse","properties","hash","substr","currentCleanerID","getAllCleanings","getAllProperties","cleaners","map","cleaning","index","newProps","nextProps","nextState","currentPropertyID","m","propertyList","titles","_id","prevProps","prevState","start","end","find","name","cleaned","mapStateToProps","pathname","router","location","search","inFlight"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {\n    CardColumns,\n    Col,\n    Image,\n    ListGroup,\n    Nav,\n    Row,\n    Tab,\n    Modal,\n    Button,\n    Form,\n    DropdownButton,\n    Dropdown,\n    Table\n} from 'react-bootstrap';\nimport {fetchAllProperties, updateSelectedMovie, createReview} from '../actions/movieActions';\nimport {connect} from \"react-redux\";\nimport { replace, push } from 'connected-react-router'\nimport Card from \"react-bootstrap/Card\";\nimport Container from \"react-bootstrap/Container\";\nimport Cookies from 'js-cookie';\nimport '../App.css'\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport BootstrapTable from 'react-bootstrap-table-next';\n\n\n\n\n\nclass CleanerDetail extends Component {\n    constructor(props) {\n\n        super(props);\n\n        this.handleShow = this.handleShow.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.lookupProperty = this.lookupProperty.bind(this);\n        const products = [];\n        const columns = [{\n            dataField: '_id',\n            text: 'id'\n        }, {\n            dataField: 'start',\n            text: 'Start'\n        }, {\n            dataField: 'end',\n            text: 'Deadline'\n        }, {\n            dataField: 'cleaned',\n            text: 'Status'\n        }];\n        this.state = {\n            show: false,\n            reviewRating: 'Select rating',\n            reviewBody: '',\n            cleanings: [],\n            columns: columns\n        };\n    }\n\n    // handleSelect(key) {\n    //     console.log('selected' + key);\n    //     this.setState({ key: key });\n    // }\n\n    handleOnSelectRating = (eventKey, event) => {\n        this.setState({\n            reviewRating: eventKey\n        });\n        console.log('rating: ' + this.state.reviewRating);\n    };\n\n    handleOnChangeReviewBody=(event)=>\n    {\n        this.setState({reviewBody: event.target.value});\n        console.log('review: ' + this.state.reviewBody);\n    };\n\n    handleClose() {\n\n        let token = Cookies.get('token');\n        var data = {\n            reviewBody: this.state.reviewBody,\n            reviewScore: this.state.reviewRating,\n            movieID: this.props.selectedOption\n        };\n        this.props.dispatch(createReview(data, token));\n        this.setState({\n            show: false,\n            reviewRating: 'Select rating',\n            reviewBody: ''});\n\n        this.props.dispatch(fetchAllProperties());\n\n    }\n\n    handleShow() {\n        this.setState({ show: true });\n    }\n\n    lookupProperty(id){\n\n        const parameters = {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json'\n            }};\n        let property = {}\n        fetch(`http://localhost:8080/properties/${id}`, parameters)\n            .then(response => {\n                console.log('properties fetch callback json first response: ' + JSON.stringify(response));\n                return response.json();\n            })\n            .then(json => {\n                console.log('properties fetch callback json response' + JSON.stringify(json));\n                let data = JSON.parse(JSON.stringify(json));\n                console.log('this is my ref' + json.properties)\n                property = json.properties;\n                return json;\n            });\n        console.log('property' + property)\n        console.log(property)\n        return property\n\n    }\n    componentWillMount() {\n\n        let hash = this.props.hash.substr(2);\n        let currentCleanerID = hash;\n        console.log('hash: ' + hash);\n        console.log('selectedOption: ' + currentCleanerID);\n\n        // if (this.props.hash !== \"\" && currentCleanerID === \"\"){\n        //     this.props.dispatch(updateSelectedMovie(hash));\n        // }\n\n        // this.props.dispatch(fetchAllProperties());\n\n\n\n\n        this.getAllCleanings();\n        this.getAllProperties();\n\n\n        console.log('comp will mount cleanerdetail')\n        console.log(this.props);\n\n        //\n        // console.log('Component WILL MOUNT!');\n        // console.log('hash: ' + this.props.hash)\n        // console.log('selected option: ' + this.props.selectedOption);\n        // //this.props.dispatch(fetchAllProperties(checkCookie()));\n        // console.log('selected option: ' + this.props.selectedOption);\n\n\n        // if(this.props.selectedOption === \"\"){\n        //\n        //     this.props.dispatch(fetchAllProperties(checkCookie()));\n        //     this.props.dispatch(updateSelectedMovie(this.props.hash.substr(2)));\n        // }\n        // else {\n        //\n        //     this.props.dispatch(updateSelectedMovie(this.props.selectedOption));\n        //\n        // }\n        //updateSelectedMovie(this.props.hash.substr(2));\n        // console.log('selected option: ' + this.props.selectedOption);\n        //\n\n        //this.props.dispatch(fetchAllProperties(checkCookie()));\n\n    }\n\n    getAllCleanings(){\n        let hash = this.props.hash.substr(2);\n        let currentCleanerID = hash;\n\n\n        const parameters = {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json'\n            }};\n        return fetch(`http://localhost:8080/cleaners/${currentCleanerID}/cleanings`, parameters)\n            .then(response => {\n                console.log('cleaners fetch callback json first response: ' + JSON.stringify(response));\n                return response.json();\n            })\n            .then(json => {\n                console.log('cleaners fetch callback json response' + JSON.stringify(json));\n                let data = JSON.parse(JSON.stringify(json));\n                console.log(data.cleaners);\n                this.setState({\n                    \"cleanings\": data.cleanings,\n                    \"cleanerID\": currentCleanerID\n                });\n                this.state.cleanings.map((cleaning, index) => (console.log(this.lookupProperty(cleaning.property))))\n                return json;\n            });\n    }\n\n    getAllProperties(){\n\n        const parameters = {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json'\n            }};\n        return fetch(`http://localhost:8080/properties?cleanings=true`, parameters)\n            .then(response => {\n                console.log('properties fetch callback json first response: ' + JSON.stringify(response));\n                return response.json();\n            })\n            .then(json => {\n                console.log('cleaners fetch callback json response' + JSON.stringify(json));\n                let data = JSON.parse(JSON.stringify(json));\n                console.log(data.cleaners);\n                this.setState({\n                    \"properties\": data.properties\n                });\n                return json;\n            });\n    }\n    componentWillReceiveProps(newProps) {\n        //console.log('comp will receive props: ' )\n        console.log('willReceiveProps')\n        console.log(newProps)\n\n        //var newPropsObject = JSON.parse(newProps);\n        //var result = newPropsObject[0];\n        //console.log(JSON.parse(newProps))\n\n\n\n    }\n\n    componentWillUpdate(nextProps, nextState) {\n        console.log('comp will update')\n        console.log(nextProps)\n\n        //this.handleOnChangeSelectedOption(this.props.hash.substr(2))\n        // if(this.props.selectedOption === \"\"){\n        //     this.props.dispatch(updateSelectedMovie(nextProps.propertyList.titles[0]._id));\n        // }\n\n\n        let hash = this.props.hash.substr(2);\n        let currentPropertyID = this.props.selectedOption;\n\n        if(hash === '' && currentPropertyID == ''){\n            let m = nextProps.propertyList.titles[0]._id\n            console.log(m)\n            this.handleOnChangeSelectedOption(m);\n        }\n\n        //const firstMovie = JSON.parse(nextProps.propertyList[0]._id)\n        //this.handleOnChangeSelectedOption(firstMovie)\n        // console.log('comp will update')\n        // if(this.props.selectedOption === '') {\n        //     let firstMovie = nextProps.propertyList[0]._id\n        //     this.handleOnChangeSelectedOption(firstMovie);\n        // }\n\n    }\n    componentDidUpdate(prevProps, prevState) {\n        // updateSelectedMovie(prevProps.hash.substr(2))\n        // console.log('new debug')\n\n\n\n\n    }\n    componentWillUnmount() {\n        console.log('comp will unmount')\n        console.log(this.props)\n\n    }\n\n    // handleOnLoadMovies = (token) => {\n    //     this.handleOnChangeSelectedOption(this.props.selectedOption || this.props.hash.substr(2));\n    //     this.props.dispatch(fetchAllProperties(token));\n    //\n    //\n    //\n    // };\n\n    componentDidMount() {\n\n\n\n        console.log('comp did mount state');\n        console.log(this.state);\n        // console.log(this.props);\n        // this.props.dispatch(fetchAllProperties());\n        //\n        // let hash = this.props.hash.substr(2);\n        // let currentPropertyID = this.props.selectedOption;\n        //\n        // if(hash === '' && currentPropertyID == ''){\n        //     let m = this.propertyList.titles[0]._id\n        //     console.log(m)\n        //     this.handleOnChangeSelectedOption(m);\n        // }\n\n        //this.props.dispatch(fetchAllProperties(checkCookie()));\n        //this.props.dispatch(updateSelectedMovie(this.props.selectedOption));\n\n\n        //this.props.dispatch(replace('/movies/#/' + this.props.selectedOption));\n\n        //console.log('comp did mount')\n\n        //this.props.dispatch(updateSelectedMovie(this.props.hash.substr(2)));\n\n    }\n    handleOnChangeSelectedOption = (e) => {\n        console.log('value of e is ' + e);\n        this.props.dispatch(updateSelectedMovie(e));\n        this.props.dispatch(replace('/properties/#/' + e));\n\n    };\n    // handleOnLoadMovies = (token) => {\n    //     this.props.dispatch(fetchAllProperties(token)).then((response) => {\n    //         console.log('MOVIES RETURNED - UPDATE STATE' + response);\n    //         this.props.dispatch(updateSelectedMovie(this.props.hash.substr(2)))\n    //\n    //     }).catch((error) => {\n    //         console.log('ERROR')\n    //     }));\n    //\n    // };\n\n\n\n\n\n    render() {\n\n        return (\n            <Container className='movie-list-tabbed'>\n                {/*{*/}\n                {/*(this.props.inFlight ? 'loading' : '')*/}\n                {/*}*/}\n                <Tab.Container id=\"moviestabs\" defaultActiveKey='a' activeKey={this.props.selectedOption} mountOnEnter={false}  onSelect={(e) => this.handleOnChangeSelectedOption(e) } >\n                    <Row>\n\n                        <Col md={9} >\n                            <Card body>\n\n\n\n                                {/*{this.state.properties &&*/}\n                                {/*this.state.properties.map((property, index) => (*/}\n                                    {/*property.cleanings.map((cleaning, index) => (*/}\n                                        {/*<div>*/}\n                                            {/*{cleaning.start}*/}\n                                            {/*{cleaning.end}*/}\n                                            {/*{cleaning.property}*/}\n                                            {/*{this.state.properties.find( property => property._id === cleaning.property ).name}*/}\n                                            {/*{this.state.properties.find( property => property._id === cleaning.property ).address}*/}\n                                            {/*{cleaning.cleaned}*/}\n                                        {/*</div>*/}\n                                    {/*))*/}\n                                {/*))*/}\n                                {/*}*/}\n\n                                {(this.state.cleanings && this.state.properties) &&\n                                this.state.cleanings.map((cleaning, index) => (\n                                    <div>\n                                        {cleaning.start}\n                                        {cleaning.end}\n                                        {cleaning.property}\n\n                                        {this.state.properties.find( property => property._id === cleaning.property ).name}\n                                        {cleaning.cleaned}\n\n\n\n                                    </div>\n                                ))\n                                }\n\n                                <BootstrapTable keyField='_id' data={ this.state.cleanings } columns={ this.state.columns } />\n\n                            </Card>\n                        </Col>\n                    </Row>\n                </Tab.Container>\n                <Modal show={this.state.show} onHide={this.handleClose}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Create Review</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Form>\n\n                            <Form.Group as={Col} controlId=\"reviewForm.reviewBody\">\n                                <Form.Label>Movie Review</Form.Label>\n                                <Form.Control onChange={ (e) => this.handleOnChangeReviewBody(e)} type=\"text\" id=\"reviewBody\" as=\"textarea\" rows=\"3\" />\n                            </Form.Group>\n                            <Form.Group as={Col} controlId=\"reviewForm.rating\">\n                                <Form.Label>Rating</Form.Label>\n                                <DropdownButton\n\n                                    title={this.state.reviewRating }\n                                    id=\"dropdown-size-medium\"\n                                    onSelect={ (eventKey, event) => this.handleOnSelectRating(eventKey, event) }\n                                >\n                                    <Dropdown.Item eventKey=\"1\">1</Dropdown.Item>\n                                    <Dropdown.Item eventKey=\"2\">2</Dropdown.Item>\n                                    <Dropdown.Item eventKey=\"3\">3</Dropdown.Item>\n                                    <Dropdown.Item eventKey=\"4\">4</Dropdown.Item>\n                                    <Dropdown.Item eventKey=\"5\">5</Dropdown.Item>\n                                </DropdownButton>\n                            </Form.Group>\n\n                        </Form>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={this.handleClose}>\n                            Close\n                        </Button>\n                        <Button variant=\"primary\" onClick={this.handleClose}>\n                            Submit Review\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </Container>\n\n        );\n    }\n}\n\n\nconst mapStateToProps = state => ({\n    pathname: state.router.location.pathname,\n    search: state.router.location.search,\n    hash: state.router.location.hash,\n    propertyList: state.property,\n    selectedOption: state.property.selectedOption,\n    inFlight: state.property.inFlight,\n});\n\nexport default connect(mapStateToProps)(CleanerDetail)\n\n\n"]},"metadata":{},"sourceType":"module"}