{"ast":null,"code":"import _classCallCheck from \"/Users/macconnolly/CS/mcimdb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/macconnolly/CS/mcimdb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/macconnolly/CS/mcimdb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/macconnolly/CS/mcimdb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/macconnolly/CS/mcimdb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/macconnolly/CS/mcimdb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/macconnolly/CS/mcimdb/src/components/movieList.js\";\nimport React, { Component } from 'react';\nimport { CardColumns, Col, Image, ListGroup, Nav, Row, Tab, Modal, Button } from 'react-bootstrap';\nimport { fetchAllMovies, updateSelectedMovie } from '../actions/movieActions';\nimport { connect } from \"react-redux\";\nimport { replace, push } from 'connected-react-router';\nimport Card from \"react-bootstrap/Card\";\nimport Container from \"react-bootstrap/Container\";\nimport Cookies from 'js-cookie';\n\nvar MovieList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MovieList, _Component);\n\n  function MovieList(props) {\n    var _this;\n\n    _classCallCheck(this, MovieList);\n\n    console.log('CONSTRUCTOR1234 !');\n    console.log('Cookie: ');\n    console.log(Cookies.get());\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MovieList).call(this, props));\n\n    _this.handleOnChangeSelectedOption = function (e) {\n      console.log('value of e is ' + e);\n\n      _this.props.dispatch(updateSelectedMovie(e));\n\n      _this.props.dispatch(replace('/movies/#/' + e));\n    };\n\n    if (_this.props.onTitleChange) _this.props.onTitleChange(null);\n    _this.handleShow = _this.handleShow.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleClose = _this.handleClose.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      show: false\n    };\n    return _this;\n  } // handleSelect(key) {\n  //     console.log('selected' + key);\n  //     this.setState({ key: key });\n  // }\n\n\n  _createClass(MovieList, [{\n    key: \"handleClose\",\n    value: function handleClose() {\n      this.setState({\n        show: false\n      });\n    }\n  }, {\n    key: \"handleShow\",\n    value: function handleShow() {\n      this.setState({\n        show: true\n      });\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var hash = this.props.hash.substr(2);\n      var currentMovieID = this.props.selectedOption;\n      console.log('hash: ' + hash);\n      console.log('selectedOption: ' + currentMovieID);\n\n      if (this.props.hash !== \"\" && currentMovieID === \"\") {\n        this.props.dispatch(updateSelectedMovie(hash));\n      }\n\n      this.props.dispatch(fetchAllMovies(Cookies.get('token'))); //\n      // console.log('Component WILL MOUNT!');\n      // console.log('hash: ' + this.props.hash)\n      // console.log('selected option: ' + this.props.selectedOption);\n      // //this.props.dispatch(fetchAllMovies(checkCookie()));\n      // console.log('selected option: ' + this.props.selectedOption);\n      // if(this.props.selectedOption === \"\"){\n      //\n      //     this.props.dispatch(fetchAllMovies(checkCookie()));\n      //     this.props.dispatch(updateSelectedMovie(this.props.hash.substr(2)));\n      // }\n      // else {\n      //\n      //     this.props.dispatch(updateSelectedMovie(this.props.selectedOption));\n      //\n      // }\n      //updateSelectedMovie(this.props.hash.substr(2));\n      // console.log('selected option: ' + this.props.selectedOption);\n      //\n      //this.props.dispatch(fetchAllMovies(checkCookie()));\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(newProps) {//console.log('comp will receive props: ' )\n      //var newPropsObject = JSON.parse(newProps);\n      //var result = newPropsObject[0];\n      //console.log(JSON.parse(newProps))\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(newProps, newState) {\n      return true;\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate(nextProps, nextState) {\n      var hash = this.props.hash.substr(2);\n      var currentMovieID = this.props.selectedOption;\n\n      if (hash === '' && currentMovieID == '') {\n        var m = nextProps.movieList[0]._id;\n        console.log(m);\n        this.handleOnChangeSelectedOption(m);\n      } //const firstMovie = JSON.parse(nextProps.movieList[0]._id)\n      //this.handleOnChangeSelectedOption(firstMovie)\n      // console.log('comp will update')\n      // if(this.props.selectedOption === '') {\n      //     let firstMovie = nextProps.movieList[0]._id\n      //     this.handleOnChangeSelectedOption(firstMovie);\n      // }\n\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {//updateSelectedMovie(prevProps.hash.substr(2))\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      console.log('comp will unmount');\n    } // handleOnLoadMovies = (token) => {\n    //     this.handleOnChangeSelectedOption(this.props.selectedOption || this.props.hash.substr(2));\n    //     this.props.dispatch(fetchAllMovies(token));\n    //\n    //\n    //\n    // };\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log('movielist');\n      console.log(JSON.stringify(this.props.movieList)); // if(this.props.selectedOption === \"\"){\n      //     this.props.dispatch(updateSelectedMovie(this.props.movieList[0]._id));\n      // }\n      // this.props.dispatch(fetchAllMovies(checkCookie()));\n      //this.handleOnChangeSelectedOption(this.props.hash.substr(2))\n      //this.props.dispatch(fetchAllMovies(checkCookie()));\n      //this.props.dispatch(updateSelectedMovie(this.props.selectedOption));\n      //this.props.dispatch(replace('/movies/#/' + this.props.selectedOption));\n      //console.log('comp did mount')\n      //this.props.dispatch(updateSelectedMovie(this.props.hash.substr(2)));\n    }\n  }, {\n    key: \"render\",\n    // handleOnLoadMovies = (token) => {\n    //     this.props.dispatch(fetchAllMovies(token)).then((response) => {\n    //         console.log('MOVIES RETURNED - UPDATE STATE' + response);\n    //         this.props.dispatch(updateSelectedMovie(this.props.hash.substr(2)))\n    //\n    //     }).catch((error) => {\n    //         console.log('ERROR')\n    //     }));\n    //\n    // };\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Container, {\n        className: \"movie-list-tabbed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(Tab.Container, {\n        id: \"moviestabs\",\n        defaultActiveKey: \"a\",\n        activeKey: this.props.selectedOption,\n        mountOnEnter: false,\n        onSelect: function onSelect(e) {\n          return _this2.handleOnChangeSelectedOption(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(Card.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, \"Top Rated Movies\"), React.createElement(Card.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(Nav, {\n        variant: \"pills\",\n        className: \"flex-column\",\n        activeKey: this.props.selectedOption,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, this.props.movieList.map(function (movie, index) {\n        return React.createElement(Nav.Item, {\n          key: movie._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207\n          },\n          __self: this\n        }, React.createElement(Nav.Link, {\n          eventKey: movie._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208\n          },\n          __self: this\n        }, '#' + (index + 1) + '. ' + movie.title));\n      }))))), React.createElement(Col, {\n        md: 9,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(Card, {\n        body: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, React.createElement(Tab.Content, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, this.props.movieList.map(function (movie, index) {\n        return React.createElement(Tab.Pane, {\n          key: movie._id,\n          eventKey: movie._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221\n          },\n          __self: this\n        }, React.createElement(Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222\n          },\n          __self: this\n        }, React.createElement(Col, {\n          md: 4,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223\n          },\n          __self: this\n        }, React.createElement(Image, {\n          width: 200,\n          src: movie.imageUrl,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224\n          },\n          __self: this\n        })), React.createElement(Col, {\n          md: \"8\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 227\n          },\n          __self: this\n        }, React.createElement(Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 228\n          },\n          __self: this\n        }, React.createElement(Col, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 230\n          },\n          __self: this\n        }, movie.title), React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 231\n          },\n          __self: this\n        }, \"Genre: \", movie.genre), React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 232\n          },\n          __self: this\n        }, \"Average Rating: \", movie.avgRating))), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236\n          },\n          __self: this\n        }), React.createElement(Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237\n          },\n          __self: this\n        }, React.createElement(Col, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 238\n          },\n          __self: this\n        }, movie.actors.map(function (actor, index) {\n          return React.createElement(\"p\", {\n            key: actor._id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 241\n            },\n            __self: this\n          }, \"Actor Name: \", actor.actorName, \", Character Name: \", actor.characterName);\n        }), React.createElement(React.Fragment, null, React.createElement(Button, {\n          variant: \"primary\",\n          onClick: _this2.handleShow,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 245\n          },\n          __self: this\n        }, \"Write a review\")))))), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 255\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 256\n          },\n          __self: this\n        }), React.createElement(CardColumns, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 257\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 258\n          },\n          __self: this\n        }, \"Reviews:\"), movie.reviews.map(function (review, index) {\n          return React.createElement(Card, {\n            className: \"review-quote\",\n            key: review._id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 262\n            },\n            __self: this\n          }, React.createElement(\"blockquote\", {\n            className: \"blockquote mb-0 review-card-body\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 264\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            className: \"review\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 266\n            },\n            __self: this\n          }, review.reviewBody), React.createElement(\"footer\", {\n            className: \"review-blockquote-footer\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 270\n            },\n            __self: this\n          }, React.createElement(\"small\", {\n            className: \"text-muted\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 271\n            },\n            __self: this\n          }, \"Overall Rating: \", review.reviewScore, \" stars\"), React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 274\n            },\n            __self: this\n          }), React.createElement(\"small\", {\n            className: \"text-muted\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 275\n            },\n            __self: this\n          }, \"-\", review.reviewerName))));\n        })));\n      })))))), React.createElement(Modal, {\n        show: this.state.show,\n        onHide: this.handleClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      }, React.createElement(Modal.Header, {\n        closeButton: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      }, React.createElement(Modal.Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }, \"Create Review\")), React.createElement(Modal.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      }, \"Woohoo, you're reading this text in a modal!\"), React.createElement(Modal.Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"secondary\",\n        onClick: this.handleClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298\n        },\n        __self: this\n      }, \"Close\"), React.createElement(Button, {\n        variant: \"primary\",\n        onClick: this.handleClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }, \"Save Changes\"))));\n    }\n  }]);\n\n  return MovieList;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    pathname: state.router.location.pathname,\n    search: state.router.location.search,\n    hash: state.router.location.hash,\n    movieList: state.movie.titles,\n    selectedOption: state.movie.selectedOption,\n    inFlight: state.movie.inFlight\n  };\n};\n\nexport default connect(mapStateToProps)(MovieList); // <ListGroup variant=\"flush\">\n//     {this.props.movieList.map((movie, index) => (\n//             <ListGroup.Item\n//                 action\n//                 key={movie._id}\n//                 value={movie._id}\n//                 active={this.props.selectedOption === movie._id}\n//                 onClick={(e) => this.handleOnChangeSelectedOption(e)}\n//             >\n//                 {movie.title}\n//             </ListGroup.Item>\n//\n//         ))}\n// </ListGroup>","map":{"version":3,"sources":["/Users/macconnolly/CS/mcimdb/src/components/movieList.js"],"names":["React","Component","CardColumns","Col","Image","ListGroup","Nav","Row","Tab","Modal","Button","fetchAllMovies","updateSelectedMovie","connect","replace","push","Card","Container","Cookies","MovieList","props","console","log","get","handleOnChangeSelectedOption","e","dispatch","onTitleChange","handleShow","bind","handleClose","state","show","setState","hash","substr","currentMovieID","selectedOption","newProps","newState","nextProps","nextState","m","movieList","_id","prevProps","prevState","JSON","stringify","map","movie","index","title","imageUrl","genre","avgRating","actors","actor","actorName","characterName","reviews","review","reviewBody","reviewScore","reviewerName","mapStateToProps","pathname","router","location","search","titles","inFlight"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {CardColumns, Col, Image, ListGroup, Nav, Row, Tab, Modal, Button} from 'react-bootstrap';\nimport {fetchAllMovies, updateSelectedMovie} from '../actions/movieActions';\nimport {connect} from \"react-redux\";\nimport { replace, push } from 'connected-react-router'\nimport Card from \"react-bootstrap/Card\";\nimport Container from \"react-bootstrap/Container\";\nimport Cookies from 'js-cookie';\n\n\n\nclass MovieList extends Component {\n    constructor(props) {\n        console.log('CONSTRUCTOR1234 !')\n        console.log('Cookie: ');\n        console.log(Cookies.get());\n        super(props);\n        if (this.props.onTitleChange)\n            this.props.onTitleChange(null);\n        this.handleShow = this.handleShow.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n\n        this.state = {\n            show: false\n        };\n    }\n\n    // handleSelect(key) {\n    //     console.log('selected' + key);\n    //     this.setState({ key: key });\n    // }\n\n    handleClose() {\n        this.setState({ show: false });\n    }\n\n    handleShow() {\n        this.setState({ show: true });\n    }\n\n    componentWillMount() {\n\n        let hash = this.props.hash.substr(2);\n        let currentMovieID = this.props.selectedOption;\n        console.log('hash: ' + hash);\n        console.log('selectedOption: ' + currentMovieID);\n        if (this.props.hash !== \"\" && currentMovieID === \"\"){\n            this.props.dispatch(updateSelectedMovie(hash));\n        }\n        this.props.dispatch(fetchAllMovies(Cookies.get('token')));\n\n\n\n\n\n        //\n        // console.log('Component WILL MOUNT!');\n        // console.log('hash: ' + this.props.hash)\n        // console.log('selected option: ' + this.props.selectedOption);\n        // //this.props.dispatch(fetchAllMovies(checkCookie()));\n        // console.log('selected option: ' + this.props.selectedOption);\n\n\n        // if(this.props.selectedOption === \"\"){\n        //\n        //     this.props.dispatch(fetchAllMovies(checkCookie()));\n        //     this.props.dispatch(updateSelectedMovie(this.props.hash.substr(2)));\n        // }\n        // else {\n        //\n        //     this.props.dispatch(updateSelectedMovie(this.props.selectedOption));\n        //\n        // }\n        //updateSelectedMovie(this.props.hash.substr(2));\n        // console.log('selected option: ' + this.props.selectedOption);\n        //\n\n        //this.props.dispatch(fetchAllMovies(checkCookie()));\n\n\n\n\n\n\n    }\n    componentWillReceiveProps(newProps) {\n        //console.log('comp will receive props: ' )\n\n\n\n        //var newPropsObject = JSON.parse(newProps);\n        //var result = newPropsObject[0];\n        //console.log(JSON.parse(newProps))\n\n    }\n    shouldComponentUpdate(newProps, newState) {\n\n\n        return true;\n    }\n    componentWillUpdate(nextProps, nextState) {\n\n        let hash = this.props.hash.substr(2);\n        let currentMovieID = this.props.selectedOption;\n\n        if(hash === '' && currentMovieID == ''){\n            let m = nextProps.movieList[0]._id\n            console.log(m)\n            this.handleOnChangeSelectedOption(m);\n        }\n\n\n        //const firstMovie = JSON.parse(nextProps.movieList[0]._id)\n        //this.handleOnChangeSelectedOption(firstMovie)\n        // console.log('comp will update')\n        // if(this.props.selectedOption === '') {\n        //     let firstMovie = nextProps.movieList[0]._id\n        //     this.handleOnChangeSelectedOption(firstMovie);\n        // }\n\n    }\n    componentDidUpdate(prevProps, prevState) {\n        //updateSelectedMovie(prevProps.hash.substr(2))\n\n\n\n    }\n    componentWillUnmount() {\n        console.log('comp will unmount')\n\n    }\n\n    // handleOnLoadMovies = (token) => {\n    //     this.handleOnChangeSelectedOption(this.props.selectedOption || this.props.hash.substr(2));\n    //     this.props.dispatch(fetchAllMovies(token));\n    //\n    //\n    //\n    // };\n\n    componentDidMount() {\n        console.log('movielist')\n        console.log(JSON.stringify(this.props.movieList))\n\n        // if(this.props.selectedOption === \"\"){\n        //     this.props.dispatch(updateSelectedMovie(this.props.movieList[0]._id));\n        // }\n\n        // this.props.dispatch(fetchAllMovies(checkCookie()));\n\n        //this.handleOnChangeSelectedOption(this.props.hash.substr(2))\n\n\n\n\n        //this.props.dispatch(fetchAllMovies(checkCookie()));\n        //this.props.dispatch(updateSelectedMovie(this.props.selectedOption));\n\n\n        //this.props.dispatch(replace('/movies/#/' + this.props.selectedOption));\n\n        //console.log('comp did mount')\n\n        //this.props.dispatch(updateSelectedMovie(this.props.hash.substr(2)));\n\n    }\n    handleOnChangeSelectedOption = (e) => {\n        console.log('value of e is ' + e);\n        this.props.dispatch(updateSelectedMovie(e));\n        this.props.dispatch(replace('/movies/#/' + e));\n\n    };\n    // handleOnLoadMovies = (token) => {\n    //     this.props.dispatch(fetchAllMovies(token)).then((response) => {\n    //         console.log('MOVIES RETURNED - UPDATE STATE' + response);\n    //         this.props.dispatch(updateSelectedMovie(this.props.hash.substr(2)))\n    //\n    //     }).catch((error) => {\n    //         console.log('ERROR')\n    //     }));\n    //\n    // };\n\n\n\n\n\n\n\n\n    render() {\n\n        return (\n            <Container className='movie-list-tabbed'>\n                {/*{*/}\n                    {/*(this.props.inFlight ? 'loading' : '')*/}\n                {/*}*/}\n                <Tab.Container id=\"moviestabs\" defaultActiveKey='a' activeKey={this.props.selectedOption} mountOnEnter={false}  onSelect={(e) => this.handleOnChangeSelectedOption(e) } >\n                    <Row>\n                        <Col md={3}>\n                            <Card>\n                                <Card.Header>Top Rated Movies</Card.Header>\n                                <Card.Body>\n                            <Nav variant=\"pills\" className=\"flex-column\" activeKey={this.props.selectedOption}  >\n                                    {\n                                        this.props.movieList.map((movie, index) => (\n                                        <Nav.Item key={movie._id} >\n                                            <Nav.Link eventKey={movie._id}>\n                                                {'#' + (index+1) + '. ' + movie.title}\n                                            </Nav.Link>\n                                        </Nav.Item>\n                                    ))}\n                            </Nav>\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                        <Col md={9} >\n                            <Card body>\n                            <Tab.Content>\n                                {this.props.movieList.map((movie, index) => (\n                                    <Tab.Pane key={movie._id} eventKey={movie._id} >\n                                        <Row>\n                                            <Col md={4}>\n                                                <Image width={200} src={movie.imageUrl}/>\n                                            </Col>\n\n                                            <Col md=\"8\">\n                                                <Row>\n                                                    <Col>\n                                                    <h2>{movie.title}</h2>\n                                                    <h3>Genre: {movie.genre}</h3>\n                                                    <h3>Average Rating: {movie.avgRating}</h3>\n                                                    </Col>\n                                                </Row>\n                                                <br/>\n                                                <br/>\n                                                <Row>\n                                                    <Col>\n                                                    {\n                                                        movie.actors.map((actor, index) => (\n                                                            <p key={actor._id}>Actor Name: {actor.actorName}, Character Name: {actor.characterName}</p>\n                                                        ))\n                                                    }\n                                                        <>\n                                                            <Button variant=\"primary\" onClick={this.handleShow}>\n                                                                    Write a review\n                                                            </Button>\n\n\n                                                        </>\n                                                    </Col>\n                                                </Row>\n                                            </Col>\n                                        </Row>\n                                        <br/>\n                                        <br/>\n                                        <CardColumns>\n                                            <h3>Reviews:</h3>\n                                        {\n                                            movie.reviews.map((review, index) => (\n\n                                                    <Card className=\"review-quote\" key={review._id}>\n\n                                                        <blockquote className=\"blockquote mb-0 review-card-body\">\n\n                                                            <p className=\"review\">\n                                                                {review.reviewBody}\n                                                            </p>\n\n                                                            <footer className=\"review-blockquote-footer\">\n                                                                <small className=\"text-muted\">\n                                                                    Overall Rating: {review.reviewScore} stars\n                                                                </small>\n                                                                <br/>\n                                                                <small className=\"text-muted\">\n                                                                    -{review.reviewerName}\n                                                                </small>\n                                                            </footer>\n                                                        </blockquote>\n                                                    </Card>\n                                            ))\n                                        }\n                                        </CardColumns>\n                                    </Tab.Pane>\n\n                                ))}\n                            </Tab.Content>\n                            </Card>\n                        </Col>\n                    </Row>\n                </Tab.Container>\n                <Modal show={this.state.show} onHide={this.handleClose}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Create Review</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>Woohoo, you're reading this text in a modal!</Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={this.handleClose}>\n                            Close\n                        </Button>\n                        <Button variant=\"primary\" onClick={this.handleClose}>\n                            Save Changes\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </Container>\n\n        );\n    }\n}\n\n\nconst mapStateToProps = state => ({\n    pathname: state.router.location.pathname,\n    search: state.router.location.search,\n    hash: state.router.location.hash,\n    movieList: state.movie.titles,\n    selectedOption: state.movie.selectedOption,\n    inFlight: state.movie.inFlight\n});\n\nexport default connect(mapStateToProps)(MovieList)\n\n// <ListGroup variant=\"flush\">\n//     {this.props.movieList.map((movie, index) => (\n//             <ListGroup.Item\n//                 action\n//                 key={movie._id}\n//                 value={movie._id}\n//                 active={this.props.selectedOption === movie._id}\n//                 onClick={(e) => this.handleOnChangeSelectedOption(e)}\n//             >\n//                 {movie.title}\n//             </ListGroup.Item>\n//\n//         ))}\n// </ListGroup>\n"]},"metadata":{},"sourceType":"module"}